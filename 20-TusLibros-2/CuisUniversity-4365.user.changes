

----STARTUP---- (25 October 2020 16:12:23) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover stamp: 'MS 10/25/2020 16:15:45'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:28:52'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'MS 10/25/2020 16:28:34'!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = 0@0.
self assert: MyRover direction = $N. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:29:30'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:29:30'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:30:02'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:30:02'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:30:17'!
initializeInPosition: aPoint facing: aCharacter 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInitializeInPosition: aPoint facing: aCharacter ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:31:13' prior: 50882086!
initializeInPosition: aPoint facing: aCharacter 

	^self new initializeInPosition: aPoint facing: aCharacter. ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:31:25' prior: 50882096!
initializeInPosition: aPoint facing: aDirection 

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:31:49'!
ERROR!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:11'!
initializeInPosition: aPoint facing: aDirection 
	self shouldBeImplemented.
	point := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:40' prior: 50882125!
initializeInPosition: aPoint facing: aDirection 
	
	point := aPoint.
	direction := aDirection.! !

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction positon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:54' prior: 50882132!
initializeInPosition: aPoint facing: aDirection 
	
	positon := aPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:33:03'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:33:24'!
position
	self shouldBeImplemented.! !

Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:34:15'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:34:26' prior: 50882154!
position
	^position.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:34:35'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:35:04' prior: 50882069!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:35:05'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:35:56'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:37:11' prior: 50882146!
initializeInPosition: aPoint facing: aDirection 
	
	position := aPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:19'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:20'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:37:31'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:37:36' prior: 50882200!
direction

	^direction! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:47'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:45:26'!
test02

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:45:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:45:35'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:45:35'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:45:57'!
processCommands: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:46:38' prior: 50882228!
processCommands: aString 
	
	position:= (0@1).! !

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:46:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:46:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:46:45'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:47:17'!
test03

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:47:25'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:47:25'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:49:31' prior: 50882233!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:51:26'!
test04

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:51:33'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:51:33'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:53:15' prior: 50882258!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].
				
	direction:= $E.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:53:40'!
test05

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:53:43'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:53:43'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:55:15' prior: 50882290!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].
				
	aString = 'r' ifTrue: [direction:= $E]
				ifFalse: [direction:= $O].! !

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:55:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:57:21'!
test06

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:41'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:06:29' prior: 50882318!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:06:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:13:15' prior: 50882368!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].
		
	aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:13:56'!
test07

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
! !

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:14:01'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:14:01'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:06:29' prior: 50882393!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:17:38'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:17:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:17:49'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:17:49'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:00'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:00'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:18:28'!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:38'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:18:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:28:13' prior: 50882493!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:28:32'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:28:39'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:28:39'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:29:03'!
InvalidCommandErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:29:30' prior: 50882590!
InvalidCommandErrorDescription
	
	^'Invalid Command'.! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:29:33'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:30:05' prior: 50882573!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:30:18'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:30:48'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:36:48' prior: 50882431!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [[aString = 'r' or: [aString = 'l']] 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]
			]
		ifFalse: [self signalInvalidCommand]].! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:36:53'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:38:14'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:38:14'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:41:24'!
FAILURE!

self class!
!MarsRover methodsFor: 'nil' stamp: 'MS 10/25/2020 17:43:59'!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:44:32' prior: 50882643!
SignalInvalidCommand

	self error: self class InvalidCommandErrorDescription! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:45:17'!
invalidCommandErrorDescription
	
	^'Invalid Command'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:45:17' prior: 50882649!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription! !

!methodRemoval: MarsRover class #InvalidCommandErrorDescription stamp: 'MS 10/25/2020 17:45:17'!
InvalidCommandErrorDescription
	
	^'Invalid Command'.!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!methodRemoval: MarsRoverTest #no_test08 stamp: 'MS 10/25/2020 17:46:16'!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!
!MarsRover methodsFor: 'signals' stamp: 'MS 10/25/2020 17:47:04'!
signalInvalidCommand

	self error: self class invalidCommandErrorDescription! !

!methodRemoval: MarsRover #SignalInvalidCommand stamp: 'MS 10/25/2020 17:47:04'!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:48:11' prior: 50882603!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:48:16'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:50:03' prior: 50882620!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]
			]
		ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:50:34' prior: 50882761!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:52:59'!
test01MarsRoverHasPostionAndDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. ! !

!methodRemoval: MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:52:59'!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:53:43'!
test02MarsRoverCanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!methodRemoval: MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:53:44'!
test02

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:02'!
test03MarsRoverCanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!methodRemoval: MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:54:03'!
test03

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:35'!
test04MarsRoverCanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!methodRemoval: MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:54:35'!
test04

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:47'!
MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:54:48'!
test05

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:58'!
test05MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #MarsRoverCanRotateLeft stamp: 'MS 10/25/2020 17:54:58'!
MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:55:53'!
test06MovingDoesNotAlterTheDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:55:55'!
test06

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:18'!
test02CanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!methodRemoval: MarsRoverTest #test02MarsRoverCanMoveForward stamp: 'MS 10/25/2020 17:56:18'!
test02MarsRoverCanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:28'!
test03CanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!methodRemoval: MarsRoverTest #test03MarsRoverCanMoveBackwards stamp: 'MS 10/25/2020 17:56:28'!
test03MarsRoverCanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:37'!
test04CanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!methodRemoval: MarsRoverTest #test04MarsRoverCanRotateRight stamp: 'MS 10/25/2020 17:56:37'!
test04MarsRoverCanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:44'!
test05CanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #test05MarsRoverCanRotateLeft stamp: 'MS 10/25/2020 17:56:44'!
test05MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:57:13'!
test07RotatingDoesNotAlterPosition

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:57:13'!
test07

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:58:14'!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:58:15'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:01:40'!
isMovementCommand: aString

	^ aString = 'f' or: [aString = 'b']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:01:40' prior: 50882775!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:04' prior: 50883021!
isMovementCommand: aCommand

	^ aCommand = 'f' or: [aCommand = 'b']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:35'!
isRotationCommand: aString

	^ aString = 'r' or: [aString = 'l']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:35' prior: 50883026!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:47' prior: 50883045!
isRotationCommand: aCommand

	^ aCommand = 'r' or: [aCommand = 'l']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:03:53' prior: 50883050!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:16'!
move: aString

	^ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:17' prior: 50883069!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:32' prior: 50883082!
move: aDirection

	^ aDirection = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:59'!
rotate: aString

	^ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:06:00' prior: 50883088!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ self rotate: aString]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:06:26' prior: 50883106!
rotate: aDirection

	^ aDirection = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:07:02' prior: 50883112!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ self rotate: aString]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:09:40' prior: 50883128!
processCommands: aString 
	
	self assertIsValidCommand: aString.
	
	(self isMovementCommand: aString) 
		ifTrue: [self move: aString].
	(self isRotationCommand: aString) 
		ifTrue: [ self rotate: aString].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:10:11'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:10:11'!
FAILURE!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:10:14'!
ERROR!
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:10:35'!
assertIsValidCommand: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:13:07' prior: 50883174!
assertIsValidCommand: aString 
	
	((self isMovementCommand: aString) or: [self isRotationCommand: aString]) ifFalse: [self signalInvalidCommand].! !

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:13:09'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:13:16'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:14:09'!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:15:44'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:15:45'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:20:37' prior: 50883138!
processCommands: aString 
	
	aString do:[:aCommand |self assertIsValidCommand: aCommand.
	
	(self isMovementCommand: aCommand) 
		ifTrue: [self move: aCommand].
	(self isRotationCommand: aCommand) 
		ifTrue: [ self rotate: aCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:12' prior: 50883040!
isMovementCommand: aCommand

	^ aCommand = $f or: [aCommand = $b]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:27' prior: 50883064!
isRotationCommand: aCommand

	^ aCommand = $r or: [aCommand = $l]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:42' prior: 50883100!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:22:05' prior: 50883122!
rotate: aDirection

	^ aDirection = $r 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:22:22' prior: 50883179!
assertIsValidCommand: aCommand 
	
	((self isMovementCommand: aCommand) or: [self isRotationCommand: aCommand]) ifFalse: [self signalInvalidCommand].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:23:43' prior: 50883226!
processCommands: aString 
	
	aString do:[:aCommand |
		self assertIsValidCommand: aCommand.
	
		(self isMovementCommand: aCommand) 
			ifTrue: [self move: aCommand].
		(self isRotationCommand: aCommand) 
			ifTrue: [ self rotate: aCommand]].! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:23:52'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:23:52'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:24:50' prior: 50883246!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + (0@1)]
			ifFalse: [position := (0@-1)]! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:24:57'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:24' prior: 50883214!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ffb'.

self assert: MyRover position = (0@1).
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:29' prior: 50883290!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@1).
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:54'!
test10

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:25:59'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:25:59'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:26:16' prior: 50883281!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + (0@1)]
			ifFalse: [position := position + (0@-1)]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:24'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:24'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:26:45' prior: 50883298!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:26:52'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:27:54'!
test11

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:28:24'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:28:24'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:29:46'!
RotateLeft

	^ direction:= $E! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:29:46' prior: 50883252!
rotate: aDirection

	^ aDirection = $r 
				ifTrue: [self RotateLeft]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:10' prior: 50883411!
rotate: aDirection

	^ aDirection = $l 
				ifTrue: [self RotateLeft]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:24'!
RotateRight

	^ direction:= $O! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:24' prior: 50883417!
rotate: aDirection

	^ aDirection = $l 
				ifTrue: [self RotateLeft]
				ifFalse: [self RotateRight]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:33:12' prior: 50883407!
RotateLeft

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:33:58' prior: 50883423!
RotateRight

	direction = $N ifTrue: [direction:= $O].
	direction = $E ifTrue: [direction:= $N].
	direction = $S ifTrue: [direction:= $E].
	direction = $O ifTrue: [direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:34:15'!
RotateLeft1

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:34:55' prior: 50883433!
RotateLeft

	direction = $N ifTrue: [direction:= $O].
	direction = $E ifTrue: [direction:= $N].
	direction = $S ifTrue: [direction:= $E].
	direction = $O ifTrue: [direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:35:05' prior: 50883442!
RotateRight

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !

!methodRemoval: MarsRover #RotateLeft1 stamp: 'MS 10/25/2020 18:35:18'!
RotateLeft1

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:36:03'!
FAILURE!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:36:50'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:38:51' prior: 50883459!
RotateLeft

	direction = $N ifTrue: [^direction:= $O].
	direction = $E ifTrue: [^direction:= $N].
	direction = $S ifTrue: [^direction:= $E].
	direction = $O ifTrue: [^direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:38:59' prior: 50883468!
RotateRight

	direction = $N ifTrue: [^direction:= $E].
	direction = $E ifTrue: [^direction:= $S].
	direction = $S ifTrue: [^direction:= $O].
	direction = $O ifTrue: [^direction:= $N].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:40:26'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'fab']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@1).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:40:30'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!methodRemoval: MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:41:34'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'fab']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@1).
self assert: MyRover direction = $N.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:43:24'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:43:28'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:43:28'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:45:45' prior: 50883319!
move: aDirection

	| forwardDirection |
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:48:26' prior: 50883674!
move: aDirection

	| forwardDirection |
	
	direction = $N ifTrue:[forwardDirection := (0@1)].
	direction = $E ifTrue:[forwardDirection := (1@0)].
	direction = $S ifTrue:[forwardDirection := (0@-1)].
	direction = $O ifTrue:[forwardDirection := (-1@0)].

	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!methodRemoval: MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:51:15'!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:51:55'!
test09canProcessMoreThanOneCommand

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:51:55'!
test10

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:52:29'!
test09canProcessMultipleMoveCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test09canProcessMoreThanOneCommand stamp: 'MS 10/25/2020 18:52:29'!
test09canProcessMoreThanOneCommand

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:02'!
test11canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!methodRemoval: MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:53:02'!
test11

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:15'!
test10canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!methodRemoval: MarsRoverTest #test11canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 18:53:15'!
test11canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:59'!
test11MovesAccordingItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!methodRemoval: MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:53:59'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:54:31'!
test11MovesTowardsItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!methodRemoval: MarsRoverTest #test11MovesAccordingItsDirection stamp: 'MS 10/25/2020 18:54:31'!
test11MovesAccordingItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 18:54:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:00:51'!
test12MarsRoverCantHaveAnInvalidPosition

|MyRover|

self should: [MyRover := MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidInitialPositionErrorDescription.
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:01:18' prior: 50883872!
test12MarsRoverCantHaveAnInvalidPosition

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidInitialPositionErrorDescription.
! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:01:24'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:01:24'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:01:45'!
invalidInitialPositionErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:02:12' prior: 50883898!
invalidInitialPositionErrorDescription
	
	^'Invalid position'! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:02:15'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:03:32' prior: 50882103!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:03:37'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:05:09'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:05:09'!
FAILURE!
!MarsRoverTest methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:05:13' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:02'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:02'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:06:32'!
ERROR!
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:06:59'!
assertIsValidPosition: aPoint 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:07:31' prior: 50884017!
assertIsValidPosition: aPoint 
	
	aPoint isKindOf: Point.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:09:02' prior: 50884022!
assertIsValidPosition: aPoint 
	
	(aPoint isKindOf: Point) ifFalse:[self error: self invalidInitialPositionErrorDescription].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:09:05'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:11'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:09:11'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:31'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:49'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:12:24'!
invalidPositionErrorDescription
	
	^'Invalid position'! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:12:24' prior: 50884027!
assertIsValidPosition: aPoint 
	
	(aPoint isKindOf: Point) ifFalse:[self error: self invalidPositionErrorDescription].! !

!methodRemoval: MarsRover class #invalidInitialPositionErrorDescription stamp: 'MS 10/25/2020 19:12:24'!
invalidInitialPositionErrorDescription
	
	^'Invalid position'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:12:52' prior: 50883882!
test12MarsRoverCantHaveAnInvalidPosition

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidPositionErrorDescription.
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:12:58'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:12:58'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:06'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:06'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:38'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:14:10'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:15:10'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:16:57' prior: 50883913!
initializeInPosition: aPoint facing: aDirection 

	"self assertIsValidPosition: aPoint."

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:04'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:17:04'!
FAILURE!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:21'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:21'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:18:20'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:27:20'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:29:41' prior: 50882998!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover invalidCommandErrorDescription].


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:29:44'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:29:44'!
ERROR!

!methodRemoval: MarsRoverTest #assert:description: stamp: 'MS 10/25/2020 19:31:08'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:15'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:15'!
FAILURE!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:31:28'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:33'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:33'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:31:51' prior: 50884162!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:59'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:32:26' prior: 50884221!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:32:29'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:33:00'!
test13MarsRoverCantHaveAnInvalidDirection

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidDirectionErrorDescription.
! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:05'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:05'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:33:21'!
invalidDirectionErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:33:37' prior: 50884376!
invalidDirectionErrorDescription
	
	^'Invalid Direction'.! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:39'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:34:29' prior: 50884360!
test13MarsRoverCantHaveAnInvalidDirection

self should: [MarsRover initializeInPosition: (0@0) facing: 0.]
	
	raise: Error
		withMessageText: MarsRover invalidDirectionErrorDescription.
! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:34:32'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:34:32'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:35:11' prior: 50884298!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.
	self assertIsValidDirection: aDirection.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:35:25'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:35:25'!
FAILURE!
!MarsRoverTest methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:35:30' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!methodRemoval: MarsRoverTest #assert:description: stamp: 'MS 10/25/2020 19:35:54'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:36:12'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:36:12'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:36:16'!
ERROR!
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:36:30'!
assertIsValidDirection: aCharacter 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:39:53' prior: 50884475!
assertIsValidDirection: aDirection 
	(aDirection = $N or:[aDirection = $E or: [aDirection = $S or:[aDirection =  $W]]])
		ifFalse:[self error: self invalidDirectionErrorDescription].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:39:55'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

Object subclass: #Compass
	instanceVariableNames: 'direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: #MarsRover stamp: 'MS 10/25/2020 19:51:38'!
Object subclass: #Compass
	instanceVariableNames: 'direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: #MarsRover stamp: 'MS 10/25/2020 19:53:18'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Compass class methodsFor: 'nil' stamp: 'MS 10/25/2020 19:55:50'!
degreeToChar: aDegree

	aDegree = 0 ifTrue:[^$N].
	aDegree = 90 ifTrue:[^$E].
	aDegree = 180 ifTrue:[^$S].
	aDegree = 270 ifTrue:[^$O].! !
!Compass class methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:58:27' prior: 50884554!
degreeToChar: aDegree

	|NormalizedDegree|

	NormalizedDegree := aDegree % 360.
	NormalizedDegree = 0 ifTrue:[^$N].
	NormalizedDegree = 90 ifTrue:[^$E].
	NormalizedDegree = 180 ifTrue:[^$S].
	NormalizedDegree = 270 ifTrue:[^$O].! !
!Compass class methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:58:43' prior: 50884562!
degreeToChar: aDegree

	|NormalizedDegree|

	NormalizedDegree := aDegree % 360.
	
	NormalizedDegree = 0 ifTrue:[^$N].
	NormalizedDegree = 90 ifTrue:[^$E].
	NormalizedDegree = 180 ifTrue:[^$S].
	NormalizedDegree = 270 ifTrue:[^$O].! !
!Compass class methodsFor: 'convertions' stamp: 'MS 10/25/2020 20:01:31'!
charToDegree: aChar

	aChar = $N ifTrue:[^0].
	aChar = $E ifTrue:[^90].
	aChar = $S ifTrue:[^180].
	aChar = $O ifTrue:[^270].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:01:40'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:01:41'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 20:02:57' prior: 50882190!
initializeInPosition: aPoint facing: aDirection 
	
	position := aPoint.
	direction := Compass charToDegree: aDirection.! !
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 20:03:20' prior: 50882205!
direction

	^Compass degreeToChar: direction.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:03:46' prior: 50883522!
RotateLeft

	direction:= direction -90.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:03:58' prior: 50883531!
RotateRight

	direction = direction + 90.! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:04:06'!
FAILURE!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:04:06'!
FAILURE!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:04:06'!
FAILURE!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:04:06'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:04:06'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:05:22' prior: 50883682!
move: aDirection

	| forwardDirection |
	
	self direction = $N ifTrue:[forwardDirection := (0@1)].
	self direction = $E ifTrue:[forwardDirection := (1@0)].
	self direction = $S ifTrue:[forwardDirection := (0@-1)].
	self direction = $O ifTrue:[forwardDirection := (-1@0)].

	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:05:26'!
FAILURE!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:05:26'!
FAILURE!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:05:27'!
FAILURE!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:05:27'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:05:27'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:05:27'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:05:27'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:05:27'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:05:59'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:08:30'!
ERROR!
!Compass class methodsFor: 'convertions' stamp: 'MS 10/25/2020 20:11:19' prior: 50884573!
degreeToChar: aDegree

	|NormalizedDegree|

	NormalizedDegree := aDegree \\ 360.
	
	NormalizedDegree = 0 ifTrue:[^$N].
	NormalizedDegree = 90 ifTrue:[^$E].
	NormalizedDegree = 180 ifTrue:[^$S].
	NormalizedDegree = 270 ifTrue:[^$O].! !

 5.0 \\ 3.0!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:12:08'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:12:08'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:12:08'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:12:24'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:13:02'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:13:08'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:13:12'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:14:26' prior: 50884647!
RotateRight

	direction := direction + 90.! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:14:30'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:14:53' prior: 50884643!
RotateLeft

	direction := direction -90.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:23:05' prior: 50884692!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction-90)/180 even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).
	"
	self direction = $N ifTrue:[forwardDirection := (0@1)].
	self direction = $E ifTrue:[forwardDirection := (1@0)].
	self direction = $S ifTrue:[forwardDirection := (0@-1)].
	self direction = $O ifTrue:[forwardDirection := (-1@0)].
"
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:23:08'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:23:08'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:23:08'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:23:09'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:23:09'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:23:09'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:23:09'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:23:31' prior: 50884866!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90)/180 even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).
	"
	self direction = $N ifTrue:[forwardDirection := (0@1)].
	self direction = $E ifTrue:[forwardDirection := (1@0)].
	self direction = $S ifTrue:[forwardDirection := (0@-1)].
	self direction = $O ifTrue:[forwardDirection := (-1@0)].
"
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:23:36' prior: 50884927!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).
	"
	self direction = $N ifTrue:[forwardDirection := (0@1)].
	self direction = $E ifTrue:[forwardDirection := (1@0)].
	self direction = $S ifTrue:[forwardDirection := (0@-1)].
	self direction = $O ifTrue:[forwardDirection := (-1@0)].
"
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:23:53'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:23:54'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:24:34' prior: 50884948!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).

	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:26:05' prior: 50885009!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromDirection]
			ifFalse: [position := position - self getMovementFromDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:26:35'!
getMovementFromDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis)! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:26:35' prior: 50885022!
move: aDirection

	self getMovementFromDirection.

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromDirection]
			ifFalse: [position := position - self getMovementFromDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:26:59' prior: 50885046!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromDirection]
			ifFalse: [position := position - self getMovementFromDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:29:22' prior: 50885055!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromDirection]
			ifFalse: [position := position - self getMovementFromDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:29:38'!
getMovementFromFacingDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 20:29:38' prior: 50885069!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromFacingDirection]
			ifFalse: [position := position - self getMovementFromFacingDirection]! !

!methodRemoval: MarsRover #getMovementFromDirection stamp: 'MS 10/25/2020 20:29:38'!
getMovementFromDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis)!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:30:03' prior: 50885077!
getMovementFromFacingDirection

	|xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	^(xAxis@yAxis)! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:34:06'!
PASSED!

----SNAPSHOT----(25 October 2020 20:37:06) CuisUniversity-4365.image priorSource: 17612627!

----QUIT----(25 October 2020 20:37:07) CuisUniversity-4365.image priorSource: 17714717!

----STARTUP---- (2 November 2020 19:15:25) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


----End fileIn of \Users\mdlcs\Downloads\OS\cuis3\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:44'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:44'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 19:32:09' prior: 50885457!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value]  ifFalse: [aTransaction value]] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 19:32:26' prior: 50885530!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value]  ifFalse: [aTransaction value not]] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:32:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:30'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 19:33:14' prior: 50885568!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value]  ifFalse: [aTransaction value negated]] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:33:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:33:18'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 19:38:40' prior: 50885606!
balance

	^transactions sum: [ :aTransaction | aTransaction accountForBalance] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:38:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:38:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:38:47'!
ERROR!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:39:14'!
accountForBalance
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:39:32' prior: 50885677!
accountForBalance
	
	self subclassResponsibility.! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:39:37'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:39:50' overrides: 50885682!
accountForBalance
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:40:09' prior: 50885691 overrides: 50885682!
accountForBalance
	^self value.! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:14'!
ERROR!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:40:20' overrides: 50885682!
accountForBalance
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:40:34' prior: 50885708 overrides: 50885682!
accountForBalance
	^self value negated .! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:40:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: #'Portfolio-Ejercicio' stamp: 'MS 11/2/2020 19:50:35'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'MS 11/2/2020 19:54:30'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'MS 11/2/2020 19:53:28'!
test01PortfolioHasZeroAsBalanceWhenCreated 

	| aPortfolio |
	
	aPortfolio := Portfolio new.

	self assert: 0 equals: Portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:54:41' prior: 50885767!
test01PortfolioHasZeroAsBalanceWhenCreated 

	| aPortfolio |
	
	aPortfolio := Portfolio new.

	self assert: 0 equals: aPortfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:54:45'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:54:45'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/2/2020 19:54:57'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/2/2020 19:55:06' prior: 50885789!
balance
	^0.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:55:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:55:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 20:03:27'!
test02AddingAccountChangesBalanceByAccountBalance

	| aPortfolio  account |
	
	account := ReceptiveAccount  new.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: account balance.


! !

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:03:34'!
ERROR!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:03:34'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 20:32:16' prior: 50885641!
balance
	
	|balance|

	balance:= 0.
	balance := transactions do: [ :aTransaction | aTransaction accountForBalance: balance].
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:32:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:32:22'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:32:22'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 20:32:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 20:32:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 20:32:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 20:32:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:32:27'!
ERROR!
!Deposit methodsFor: 'value' stamp: 'MS 11/2/2020 20:33:00'!
accountForBalance: balance
	^balance + self value.! !

!methodRemoval: Deposit #accountForBalance stamp: 'MS 11/2/2020 20:35:59'!
accountForBalance
	^self value.!
!Withdraw methodsFor: 'value' stamp: 'MS 11/2/2020 20:36:22'!
accountForBalance: balance
	^balance - self value.! !

!methodRemoval: Withdraw #accountForBalance stamp: 'MS 11/2/2020 20:36:26'!
accountForBalance
	^self value negated .!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 20:36:43' prior: 50885820!
balance
	
	|balance|

	balance:= 0.
	balance := transactions do: [ :aTransaction | balance := aTransaction accountForBalance: balance].
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:36:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:36:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:36:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 20:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 20:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 20:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 20:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:36:58'!
FAILURE!
!Deposit methodsFor: 'value' stamp: 'MS 11/2/2020 20:39:58' prior: 50885857!
accountForBalance: balance

	|temp|

	temp := balance + self value. 
	^balance + self value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:40:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:40:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:40:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 20:40:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 20:40:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 20:40:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 20:40:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:40:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 20:43:10' prior: 50885874!
balance
	
	|balance|

	balance:= 0.
	transactions do: [ :aTransaction | balance := aTransaction accountForBalance: balance].
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:43:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 20:43:24'!
PASSED!
!Deposit methodsFor: 'value' stamp: 'MS 11/2/2020 20:44:02' prior: 50885912!
accountForBalance: balance
	^balance + self value.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 20:45:28' prior: 50885803!
test02AddingAccountChangesBalanceByAccountBalance

	| aPortfolio  account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: aPortfolio balance.


! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:45:32'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:45:32'!
ERROR!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:45:32'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 20:45:56'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 20:47:00' prior: 50886012!
add: aReceptiveAccount 
	self balance.! !

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:47:03'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'MS 11/2/2020 20:50:08'!
intialize

	contents := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:50:16'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:50:16'!
FAILURE!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:50:16'!
FAILURE!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 20:50:58' prior: 50886017!
add: aReceptiveAccount 
	
	contents add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:51:13'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:51:13'!
ERROR!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:51:13'!
ERROR!
!Portfolio methodsFor: 'intialization' stamp: 'MS 11/2/2020 20:51:52' overrides: 16896425!
initialize

	contents := OrderedCollection new.! !

!methodRemoval: Portfolio #intialize stamp: 'MS 11/2/2020 20:51:55'!
intialize

	contents := OrderedCollection new.!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:51:58'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:51:58'!
FAILURE!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:51:58'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/2/2020 20:56:04' prior: 50885793!
balance
	^contents sum: [ :anItem | anItem balance] ifEmpty: [ 0 ].! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:56:09'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:56:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 20:58:42'!
test03PortfolioKnowsRegisteredTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
		
	self assert: (account hasRegistered: deposit).


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 21:00:07' prior: 50886086!
test03PortfolioKnowsRegisteredTransactions 

	| aPortfolio  account deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aPortfolio add: account.
		
	self assert: (aPortfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 21:00:12'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 21:00:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:00:12'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:00:12'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 21:00:19'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 21:06:29' prior: 50886121!
hasRegistered: aDeposit 
	^ aDeposit = contents detect: [:anItem | anItem hasRegistered: aDeposit].! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 21:10:35' prior: 50886126!
hasRegistered: aDeposit 
	"^ aDeposit = contents detect: [:anItem | anItem hasRegistered: aDeposit] ifNone: []."
	^ contents select: [:anItem | anItem hasRegistered: aDeposit] size = 1.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:10:38'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 21:11:14' prior: 50886132!
hasRegistered: aDeposit 
	"^ aDeposit = contents detect: [:anItem | anItem hasRegistered: aDeposit] ifNone: []."
	^ (contents select: [:anItem | anItem hasRegistered: aDeposit]) size = 1.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:11:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 21:11:25'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 21:11:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:11:25'!
PASSED!

----QUIT----(2 November 2020 21:23:00) CuisUniversity-4365.image priorSource: 17714810!

----STARTUP---- (3 November 2020 16:41:15) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 16:43:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 16:45:50'!
test04PortfolioDoesNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 16:46:34' prior: 50886177!
test04PortfolioDoesNotKnowNotRegisteredTransactions

	| deposit withdraw account aPortfolio |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	aPortfolio := Portfolio  new.
	aPortfolio add: account.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 16:47:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 16:51:27'!
test05PortfolioKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 16:52:37' prior: 50886207!
test05PortfolioKnowsItsTransactions 

	| account1 deposit1 aPortfolio|
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 50 on: account1.
	
	aPortfolio := Portfolio  new.
	aPortfolio add: account1.
		
	self assert: 1 equals: aPortfolio transactions size.
	self assert: (aPortfolio transactions includes: deposit1).
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 16:52:56'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 16:52:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 16:52:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 16:52:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 16:52:56'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 16:52:56'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 16:53:02'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 17:02:27' prior: 50886253!
transactions
	
	|allTransactions|

	contents do: [:anItem | allTransactions:= allTransactions, anItem transactions].
	^allTransactions.
	! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 17:04:15' prior: 50886257!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.
	contents do: [:anItem | allTransactions:= allTransactions addAll: anItem transactions].
	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:04:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:04:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:06:43'!
test06AddingPortfolioChangesBalanceByPortfolioBalance

	| aPortfolio  account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: aPortfolio balance.


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:08:59' prior: 50886279!
test06AddingPortfolioChangesBalanceByPortfolioBalance

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.


! !

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 17:09:04'!
PASSED!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 17:10:33' prior: 50886039!
add: anItem 
	
	contents add: anItem.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:15:42'!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:18:34' prior: 50886313!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.


! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:18:41'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:18:41'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:28:56'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:28:56'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:33:53' prior: 50886328!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
	self assert: (aBiggerPortfolio transactions find: [:aTransaction | aTransaction = account]) = 
				((aBiggerPortfolio transactions find: [:aTransaction | aTransaction = aPortfolio])
				find: [:aTransaction | aTransaction = account]).

! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:33:59'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:33:59'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:34:50' prior: 50886361!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
	self assert: ((aBiggerPortfolio transactions) find: [:aTransaction | aTransaction = account]) = 
				(((aBiggerPortfolio transactions) find: [:aTransaction | aTransaction = aPortfolio])
				find: [:aTransaction | aTransaction = account]).

! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:34:54'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:34:55'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:36:51' prior: 50886394!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
	self assert: ((aBiggerPortfolio transactions) detect: [:aTransaction | aTransaction = account]) = 
				(((aBiggerPortfolio transactions) detect: [:aTransaction | aTransaction = aPortfolio])
				detect: [:aTransaction | aTransaction = account]).

! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:36:56'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:36:56'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 17:38:36'!
contents 
	
	^contents.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:38:53' prior: 50886427!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
	self assert: ((aBiggerPortfolio contents) detect: [:aTransaction | aTransaction = account]) = 
				(((aBiggerPortfolio contents) detect: [:aTransaction | aTransaction = aPortfolio])
				detect: [:aTransaction | aTransaction = account]).

! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:38:58'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:38:58'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:41:14' prior: 50886463!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:44:54' prior: 50886496!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 17:49:07' prior: 50886264!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	contents do: [:anItem | allTransactions:= anItem addNewTransactions: allTransactions].

	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:49:34'!
ERROR!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:49:34'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:49:38'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:50:07'!
addNewTransactions: anOrderedCollection 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:54:47' prior: 50886568!
addNewTransactions: aTransactionList 
	|newTransactions|
	
	newTransactions:= aTransactionList  reject: [:aTransaction| self transactions includes: aTransaction].  
	
	^aTransactionList addAll: newTransactions .! !

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:54:53'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:54:59'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 17:55:06'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 17:55:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 17:55:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 17:55:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:55:07'!
FAILURE!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 17:55:07'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:55:07'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:55:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 17:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/3/2020 17:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/3/2020 17:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/3/2020 17:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/3/2020 17:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 17:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/3/2020 17:56:35'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:56:41'!
FAILURE!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:56:41'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:57:43'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:58:18'!
FAILURE!

newTransactions!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:01:28' prior: 50886574!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= aTransactionList  reject: [:aTransaction| self transactions includes: aTransaction].  
	
	result :=  aTransactionList addAll: newTransactions .
	^result.! !

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:01:30'!
FAILURE!

^result!

^result!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:03:03' prior: 50886677!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= aTransactionList  select: [:aTransaction| self transactions includes: aTransaction].  
	
	result :=  aTransactionList addAll: newTransactions .
	^result.! !

^result!

^result!

aTransactionList!

newTransactions!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:04:52' prior: 50886692!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= self transactions reject: [:aTransaction| aTransactionList includes: aTransaction].  
	
	result :=  aTransactionList addAll: newTransactions .
	^result.! !

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:04:58'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:05:02'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:05:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:05:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:05:02'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:05:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:05:03'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:05:03'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:05:03'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:05:11'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:05:12'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:06:22'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:07:15' prior: 50886514!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:07:18'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:07:18'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 18:07:39'!
addNewTransactions: anOrderedCollection 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 18:15:47' prior: 50886783!
addNewTransactions: aTransactionList
	
	|newTransactions|

	contents do: [:anItem | newTransactions := anItem addNewTransactions: aTransactionList].

	^newTransactions.! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:15:57'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:16:20'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:16:20'!
FAILURE!

allTransactions!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:19:57'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:19:57'!
FAILURE!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 18:21:54' prior: 50886788!
addNewTransactions: aTransactionList
	
	|newTransactions|
	newTransactions := aTransactionList .

	contents do: [:anItem | newTransactions := anItem addNewTransactions: aTransactionList].

	^newTransactions.! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:21:57'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:26:17' prior: 50886531!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	contents do: [:anItem | allTransactions:= allTransactions addAll: (anItem addNewTransactions: allTransactions)].

	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:26:19'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:26:53' prior: 50886759!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:27:01'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:27:44' prior: 50886829!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	contents do: [:anItem | allTransactions:= (anItem addNewTransactions: allTransactions)].

	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:27:47'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:27:48'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:27:48'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:28:28' prior: 50886843!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	"self assert: 1 equals: aBiggerPortfolio transactions size."
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:28:29'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:28:45' prior: 50886902!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:30:00' prior: 50886074!
balance
	^self transactions sum: [ :anItem | anItem balance] ifEmpty: [ 0 ].! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:30:06'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:30:06'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:30:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:30:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:30:06'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:30:06'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:30:06'!
FAILURE!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:30:18'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:32:29' prior: 50886940!
balance
       |balance|

	balance:= 0.	

	^self transactions sum: [ :anItem | balance:= anItem accountForBalance: balance] ifEmpty: [ 0 ].! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:32:40' prior: 50886974!
balance
       |balance|

	balance:= 0.	

	self transactions sum: [ :anItem | balance:= anItem accountForBalance: balance] ifEmpty: [ 0 ].
	
	^balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:32:45'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:32:46'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:32:46'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:32:54'!
no_test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:32:57'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:32:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:32:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:32:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:32:58'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:32:58'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:32:58'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:32:58'!
FAILURE!

!methodRemoval: PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:33:03'!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

----SNAPSHOT----(3 November 2020 18:34:06) CuisUniversity-4365.image priorSource: 17744509!

----QUIT----(3 November 2020 18:50:49) CuisUniversity-4365.image priorSource: 17774490!

----STARTUP---- (8 November 2020 15:59:37) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/8/2020 16:05:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:05:52'!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!methodRemoval: PortfolioTest #no_test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:06:00'!
no_test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:06:12'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:06:13'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/8/2020 16:07:09'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/8/2020 16:07:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/8/2020 16:07:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/8/2020 16:07:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/8/2020 16:07:10'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/8/2020 16:07:10'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:07:10'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:07:10'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/8/2020 16:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/8/2020 16:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/8/2020 16:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/8/2020 16:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/8/2020 16:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/8/2020 16:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/8/2020 16:07:19'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:07:25'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:07:25'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:11:06'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:11:06'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:12:45' prior: 50887117!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	"aBiggerPortfolio add: account."
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:12:48'!
PASSED!

	"aBiggerPortfolio add: aPortfolio."!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:13:08' prior: 50887230!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	"aBiggerPortfolio add: aPortfolio."
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:13:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:14:32' prior: 50887253!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account account2 |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account2.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 200 equals: aBiggerPortfolio balance.
	self assert: 2 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:14:36'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:14:36'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:15:07' prior: 50887274!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account account2 |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account2.
	aBiggerPortfolio add: aPortfolio.
		
	"self assert: 200 equals: aBiggerPortfolio balance."
	self assert: 2 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:15:41'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:15:42'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:18:41' prior: 50887302!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account account2 |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 150 on: account2.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account2.
	aBiggerPortfolio add: aPortfolio.
		
	"self assert: 200 equals: aBiggerPortfolio balance."
	self assert: 2 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:19:09'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:19:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:28:19' prior: 50886705!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= self transactions reject: [:aTransaction| aTransactionList includes: aTransaction].  
	
	result :=  aTransactionList copy addAll: newTransactions .
	^result.! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:29:08'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:29:08'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:37:51' prior: 50887358!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= self transactions reject: [:aTransaction| aTransactionList includes: aTransaction].  
	
	result :=  newTransactions addAll: aTransactionList .
	^result.! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:40:55'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:40:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:45:14' prior: 50887377!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= self transactions reject: [:aTransaction| aTransactionList includes: aTransaction].  
	
	result :=  aTransactionList copy. 
	result addAll: newTransactions.
	^result.! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:45:51'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:45:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:46:07' prior: 50887330!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account account2 |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 150 on: account2.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account2.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 250 equals: aBiggerPortfolio balance.
	self assert: 2 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:46:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:52:01' prior: 50887415!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 2 equals: aBiggerPortfolio transactions size.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 16:52:10' prior: 50887439!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 16:52:14'!
PASSED!

----SNAPSHOT----(8 November 2020 16:57:23) CuisUniversity-4365.image priorSource: 17774583!
!PortfolioTest methodsFor: 'actions' stamp: 'MS 11/8/2020 17:01:17' prior: 50885991!
test02AddingAccountChangesBalanceByAccountBalance

	| aPortfolio  account |
	
	account:= self createAccountWithBalance: 100.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: aPortfolio balance.


! !
!PortfolioTest methodsFor: 'actions' stamp: 'MS 11/8/2020 17:01:48'!
createAccountWithBalance: aBalance

! !
!PortfolioTest methodsFor: 'actions' stamp: 'MS 11/8/2020 17:02:03' prior: 50887481!
test02AddingAccountChangesBalanceByAccountBalance

	| aPortfolio  account |
	
	account:= self createAccountWithBalance: 100.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: aPortfolio balance.


! !
!PortfolioTest methodsFor: 'actions' stamp: 'MS 11/8/2020 17:03:48' prior: 50887493!
createAccountWithBalance: aBalance	
	|account|

	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	^account. 

! !

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/8/2020 17:04:00'!
PASSED!
!PortfolioTest methodsFor: 'accessing' stamp: 'MS 11/8/2020 17:05:08' prior: 50886219!
test05PortfolioKnowsItsTransactions 

	| account deposit aPortfolio|
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 50 on: account.
	
	aPortfolio := Portfolio  new.
	aPortfolio add: account.
		
	self assert: 1 equals: aPortfolio transactions size.
	self assert: (aPortfolio transactions includes: deposit).
! !
!PortfolioTest methodsFor: 'actions' stamp: 'MS 11/2/2020 20:45:28' prior: 50887497!
test02AddingAccountChangesBalanceByAccountBalance

	| aPortfolio  account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: aPortfolio balance.


! !

!methodRemoval: PortfolioTest #createAccountWithBalance: stamp: 'MS 11/8/2020 17:05:43'!
createAccountWithBalance: aBalance	
	|account|

	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	^account. 

!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/8/2020 17:05:47'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/8/2020 17:05:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/8/2020 17:05:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/8/2020 17:05:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/8/2020 17:05:47'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/8/2020 17:05:47'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 17:05:47'!
PASSED!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/8/2020 17:06:59' prior: 50886144!
hasRegistered: aDeposit 
	^ (contents select: [:anItem | anItem hasRegistered: aDeposit]) size = 1.! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/8/2020 17:09:35' prior: 50886864!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	"contents do: [:anItem | allTransactions:= (anItem addNewTransactions: allTransactions)]."
	
	self addNewTransactions: allTransactions.

	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/8/2020 17:09:39'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/8/2020 17:09:39'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/8/2020 17:09:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/8/2020 17:09:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/8/2020 17:09:39'!
FAILURE!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/8/2020 17:09:39'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 17:09:39'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/8/2020 17:10:05' prior: 50887581!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	"contents do: [:anItem | allTransactions:= (anItem addNewTransactions: allTransactions)]."
	
	allTransactions:=  self addNewTransactions: allTransactions.

	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/8/2020 17:10:10'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/8/2020 17:10:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/8/2020 17:10:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/8/2020 17:10:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/8/2020 17:10:10'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/8/2020 17:10:10'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 17:10:10'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/8/2020 17:10:46' prior: 50887617!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	allTransactions:=  self addNewTransactions: allTransactions.

	^allTransactions.
	! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/8/2020 17:11:39' prior: 50887653!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	allTransactions:=  self addUniqueTransactions: allTransactions.

	^allTransactions.
	! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/8/2020 17:10:46' prior: 50887661!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	allTransactions:=  self addNewTransactions: allTransactions.

	^allTransactions.
	! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/8/2020 17:12:34'!
addUniqueTransactions: aTransactionList
	
	|newTransactions|
	newTransactions := aTransactionList .

	contents do: [:anItem | newTransactions := anItem addNewTransactions: aTransactionList].

	^newTransactions.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 17:12:34'!
addUniqueTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= self transactions reject: [:aTransaction| aTransactionList includes: aTransaction].  
	
	result :=  aTransactionList copy. 
	result addAll: newTransactions.
	^result.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 17:12:35' prior: 50886816!
addNewTransactions: aTransactionList
	
	|newTransactions|
	newTransactions := aTransactionList .

	contents do: [:anItem | newTransactions := anItem addUniqueTransactions: aTransactionList].

	^newTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 17:12:35' prior: 50887669!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	allTransactions:=  self addUniqueTransactions: allTransactions.

	^allTransactions.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 11/8/2020 17:12:35' prior: 50887677!
addUniqueTransactions: aTransactionList
	
	|newTransactions|
	newTransactions := aTransactionList .

	contents do: [:anItem | newTransactions := anItem addUniqueTransactions: aTransactionList].

	^newTransactions.! !

!methodRemoval: Portfolio #addNewTransactions: stamp: 'MS 11/8/2020 17:12:35'!
addNewTransactions: aTransactionList
	
	|newTransactions|
	newTransactions := aTransactionList .

	contents do: [:anItem | newTransactions := anItem addUniqueTransactions: aTransactionList].

	^newTransactions.!

!methodRemoval: ReceptiveAccount #addNewTransactions: stamp: 'MS 11/8/2020 17:12:35'!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= self transactions reject: [:aTransaction| aTransactionList includes: aTransaction].  
	
	result :=  aTransactionList copy. 
	result addAll: newTransactions.
	^result.!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/8/2020 17:12:39'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/8/2020 17:12:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/8/2020 17:12:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/8/2020 17:12:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/8/2020 17:12:39'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/8/2020 17:12:39'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/8/2020 17:12:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/8/2020 17:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/8/2020 17:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/8/2020 17:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/8/2020 17:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/8/2020 17:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/8/2020 17:12:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/8/2020 17:12:50'!
PASSED!

----SNAPSHOT----(8 November 2020 17:13:41) CuisUniversity-4365.image priorSource: 17786457!

----QUIT----(8 November 2020 17:14:02) CuisUniversity-4365.image priorSource: 17796696!

----STARTUP---- (9 November 2020 21:35:41) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


----SNAPSHOT----(9 November 2020 21:35:54) CuisUniversity-4365.image priorSource: 17796789!

----STARTUP---- (19 November 2020 18:55:24) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


----End fileIn of \Users\mdlcs\Downloads\OS\cuis3\TusLibros-18.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/19/2020 18:57:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/19/2020 18:57:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/19/2020 18:57:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/19/2020 18:57:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/19/2020 18:57:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/19/2020 18:57:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/19/2020 18:57:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/19/2020 18:57:00'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'MS 11/19/2020 19:00:55'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'MS 11/19/2020 19:06:52'!
test01ACashierCanNotReceiveAnEmptyCart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:07:17' prior: 50888034!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart|
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:08:06' prior: 50888039!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart|
	
	aCart := CartTest createCart.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'MS 11/19/2020 19:14:47'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:14:35' prior: 50888044!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := CartTest createCart.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error withMessageText: Cashier CanNotReceiveAnEmptyCart.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:14:52'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:15:37'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:15:37'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:16:53' prior: 50888057!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := Cart new.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error withMessageText: Cashier CanNotReceiveAnEmptyCart.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:17:17'!
ERROR!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/19/2020 19:17:32'!
CanNotReceiveAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/19/2020 19:18:28' prior: 50888091!
CanNotReceiveAnEmptyCart
	
	^'Cannot checkout an empty cart, are you dumb?'.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/19/2020 19:19:07' prior: 50888096!
CanNotReceiveAnEmptyCart
	
	^'Cannot checkout an empty cart'.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:19:10'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:20:34' prior: 50888078!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := Cart new.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier CanNotReceiveAnEmptyCart.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:20:36'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:20:36'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:20:47'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:23:26' prior: 50888128!
checkOut: aCart 

	self error: self class CanNotReceiveAnEmptyCart.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:23:28'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:23:30'!
PASSED!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/19/2020 19:24:28'!
canNotReceiveAnEmptyCart
	
	^'Cannot checkout an empty cart'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:24:28' prior: 50888133!
checkOut: aCart 

	self error: self class canNotReceiveAnEmptyCart.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:24:28' prior: 50888111!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := Cart new.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !

!methodRemoval: Cashier class #CanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:24:28'!
CanNotReceiveAnEmptyCart
	
	^'Cannot checkout an empty cart'.!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:24:36'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:32:46'!
test01ACashierCanNotCheckOutACartWithAnInvalidBook

	|aCart aCashier|
	
	aCart := Cart new.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:32:55'!
test02ACashierCanNotCheckOutACartWithAnInvalidBook

	|aCart aCashier|
	
	aCart := Cart new.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !

!methodRemoval: CashierTest #test01ACashierCanNotCheckOutACartWithAnInvalidBook stamp: 'MS 11/19/2020 19:32:56'!
test01ACashierCanNotCheckOutACartWithAnInvalidBook

	|aCart aCashier|
	
	aCart := Cart new.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:36:42' prior: 50888186!
test02ACashierCanNotCheckOutACartWithAnInvalidBook

	|aCatalogue aCart aCashier|
	
	aCatalogue:= ''.
	aCart := Cart initializeAcceptingItemsOf: aCatalogue.


	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:38:06'!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalogue aCart aCashier|
	
	aCatalogue:= OrderedCollection new.
	aCart := Cart initializeAcceptingItemsOf: aCatalogue.


	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !

!methodRemoval: CashierTest #test02ACashierCanNotCheckOutACartWithAnInvalidBook stamp: 'MS 11/19/2020 19:38:14'!
test02ACashierCanNotCheckOutACartWithAnInvalidBook

	|aCatalogue aCart aCashier|
	
	aCatalogue:= ''.
	aCart := Cart initializeAcceptingItemsOf: aCatalogue.


	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:39:59'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:40:11'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:40:29'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:40:42'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:41:10' prior: 50888156!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := Cart createCart.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:41:16'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:41:16'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:41:25' prior: 50888269!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:41:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:41:58' prior: 50888287!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:42:43' prior: 50888222!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalogue aCart aCashier|
	
	aCatalogue:= OrderedCollection new.
	aCart := self createCart.


	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:43:20' prior: 50888313!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalogue aCart aCashier|
	
	aCatalogue:= Array new.
	aCart := self createCart.


	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCart.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:49:45' prior: 50888327!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalogue aCart aCashier|
	
	aCatalogue:= Array new.
	aCart := self createCart.
	
	aCashier := Cashier initializeAcceptingItemsOf: aCatalogue.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogue.
	
	
	! !

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 19:49:55'!
ERROR!

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'MS 11/19/2020 19:51:25'!
Cashier class
	instanceVariableNames: 'catalogue'!
!Cashier class methodsFor: 'initialization' stamp: 'MS 11/19/2020 19:51:25'!
initializeAcceptingItemsOf: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!Cashier class methodsFor: 'initialization' stamp: 'MS 11/19/2020 19:51:54' prior: 50888363!
initializeAcceptingItemsOf: aCatalog

	catalogue := aCatalog.! !

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 19:51:57'!
ERROR!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/19/2020 19:52:08'!
canNotCheckOutACartWithDifferentCatalogue
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/19/2020 19:54:32' prior: 50888378!
canNotCheckOutACartWithDifferentCatalogue
	
	^'Cannot check out a cart with a different catalogue'! !

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 19:54:35'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 19:54:45'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 19:55:23'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 19:55:23'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:55:28'!
checkOut: aCart 
	self shouldBeImplemented.! !

!methodRemoval: Cashier class #checkOut: stamp: 'MS 11/19/2020 19:55:46'!
checkOut: aCart 
	self shouldBeImplemented.!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/19/2020 19:56:42'!
canNotCheckOutACartWithDifferentCatalogueErrorDescription
	
	^'Cannot check out a cart with a different catalogue'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:56:42' prior: 50888340!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalogue aCart aCashier|
	
	aCatalogue:= Array new.
	aCart := self createCart.
	
	aCashier := Cashier initializeAcceptingItemsOf: aCatalogue.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogueErrorDescription.
	
	
	! !

!methodRemoval: Cashier class #canNotCheckOutACartWithDifferentCatalogue stamp: 'MS 11/19/2020 19:56:42'!
canNotCheckOutACartWithDifferentCatalogue
	
	^'Cannot check out a cart with a different catalogue'!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/19/2020 19:56:55'!
canNotReceiveAnEmptyCartErrorDescription
	
	^'Cannot checkout an empty cart'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:56:55' prior: 50888150!
checkOut: aCart 

	self error: self class canNotReceiveAnEmptyCartErrorDescription.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:56:55' prior: 50888302!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self should: [aCashier checkOut: aCart] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCartErrorDescription.
	
	
	! !

!methodRemoval: Cashier class #canNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 19:56:55'!
canNotReceiveAnEmptyCart
	
	^'Cannot checkout an empty cart'.!
!Cashier class methodsFor: 'initialization' stamp: 'MS 11/19/2020 19:57:49'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'MS 11/19/2020 19:58:06'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:58:05'!
initializeAcceptingItemsOf: aCatalog

	catalogue := aCatalog.! !

!methodRemoval: Cashier class #initializeAcceptingItemsOf: stamp: 'MS 11/19/2020 19:58:32'!
initializeAcceptingItemsOf: aCatalog

	catalogue := aCatalog.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 19:59:39' prior: 50888420!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalogue aCart aCashier|
	
	aCatalogue:= Array new.
	aCart := self createCart.
	
	aCashier := Cashier acceptingItemsOf: aCatalogue.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogueErrorDescription.
	
	
	! !

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 20:00:33'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 20:00:33'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:01:16' prior: 50888447!
checkOut: aCart 

	self error: self class canNotReceiveAnEmptyCartErrorDescription.
	self error: self class canNotReceiveAnEmptyCartErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:01:36' prior: 50888514!
checkOut: aCart 

	self error: self class canNotReceiveAnEmptyCartErrorDescription.
	self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:02:04' prior: 50888522!
checkOut: aCart 

	aCart catalogue.
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.
	self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:02:27' prior: 50888531!
checkOut: aCart 

	aCart catalog.
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.
	self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:03:01' prior: 50888540!
checkOut: aCart 

	aCart catalog = self catalogue.
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.
	self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:04:15' prior: 50888549!
checkOut: aCart 

	aCart catalog = catalogue.
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.
	self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:05:26' prior: 50888559!
checkOut: aCart 

	[aCart catalog = catalogue] ifFalse: [self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.].
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:05:33' prior: 50888569!
checkOut: aCart 

	
	[aCart catalog = catalogue] ifFalse: [self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.].
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:07:13' prior: 50888453!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood withMessageText: Cashier canNotReceiveAnEmptyCartErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:07:20' prior: 50888589!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotReceiveAnEmptyCartErrorDescription.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 20:07:39'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 20:07:39'!
FAILURE!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 20:07:44'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/19/2020 20:08:12' prior: 50888579!
checkOut: aCart 

	
	aCart catalog = catalogue ifFalse: [self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.].
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 20:08:14'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/19/2020 20:08:14'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/19/2020 20:08:18'!
ERROR!

----QUIT----(19 November 2020 20:14:52) CuisUniversity-4365.image priorSource: 17796987!

----STARTUP---- (22 November 2020 14:44:44) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 14:45:08'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 14:45:09'!
ERROR!

----QUIT----(22 November 2020 14:59:20) CuisUniversity-4365.image priorSource: 17823773!

----STARTUP---- (22 November 2020 14:59:49) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:01:16' prior: 50888491!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogueErrorDescription.
	
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'MS 11/22/2020 15:01:41'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:01:41' prior: 50888624!
checkOut: aCart 

	
	aCart catalog = catalog ifFalse: [self error: self class canNotCheckOutACartWithDifferentCatalogueErrorDescription.].
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:01:41' prior: 50888481!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 15:02:47'!
canNotCheckOutACartWithDifferentCatalogErrorDescription
	
	^'Cannot check out a cart with a different catalogue'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:02:47' prior: 50888664!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:02:47' prior: 50888685!
checkOut: aCart 

	
	aCart catalog = catalog ifFalse: [self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.].
	
	self error: self class canNotReceiveAnEmptyCartErrorDescription.! !

!methodRemoval: Cashier class #canNotCheckOutACartWithDifferentCatalogueErrorDescription stamp: 'MS 11/22/2020 15:02:47'!
canNotCheckOutACartWithDifferentCatalogueErrorDescription
	
	^'Cannot check out a cart with a different catalogue'!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 15:02:58' prior: 50888700!
canNotCheckOutACartWithDifferentCatalogErrorDescription
	
	^'Cannot check out a cart with a different catalog'! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:03:03'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:03:04'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:06:02' prior: 50888722!
checkOut: aCart 
	
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:06:04'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:06:04'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:06:04'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:08:13' prior: 50888707!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:08:15'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:08:15'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:08:15'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:15:07'!
test02ACashierCanNotCheckOutWhenItDoesNotReceiveCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:15:15'!
test03ACashierCanNotCheckOutWhenItDoesNotReceiveCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test02ACashierCanNotCheckOutWhenItDoesNotReceiveCardNumber stamp: 'MS 11/22/2020 15:15:15'!
test02ACashierCanNotCheckOutWhenItDoesNotReceiveCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:15:34'!
test03ACashierCanNotCheckOutWhenItDoesNotAReceiveCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test03ACashierCanNotCheckOutWhenItDoesNotReceiveCardNumber stamp: 'MS 11/22/2020 15:15:34'!
test03ACashierCanNotCheckOutWhenItDoesNotReceiveCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:21:32' prior: 50888849!
test03ACashierCanNotCheckOutWhenItDoesNotAReceiveCardNumber

	|aCatalog aCart aCashier invalidCreditCardNumber|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	invalidCreditCardNumber := 'a'.
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: invalidCreditCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:22:04'!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier invalidCreditCardNumber|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	invalidCreditCardNumber := 'a'.
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: invalidCreditCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test03ACashierCanNotCheckOutWhenItDoesNotAReceiveCardNumber stamp: 'MS 11/22/2020 15:22:04'!
test03ACashierCanNotCheckOutWhenItDoesNotAReceiveCardNumber

	|aCatalog aCart aCashier invalidCreditCardNumber|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	invalidCreditCardNumber := 'a'.
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: invalidCreditCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:22:23' prior: 50888901!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier invalidCreditCardNumber|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	invalidCreditCardNumber := 'a'.
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: invalidCreditCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:22:34'!
ERROR!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 15:22:47'!
canNotCheckOutACartWithAnInvalidCardNumberErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 15:23:30' prior: 50888963!
canNotCheckOutACartWithAnInvalidCardNumberErrorDescription
	
	^'Invalid card number.'.! !

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:23:34'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:23:42'!
checkOut: aCart with: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:25:54' prior: 50888979!
checkOut: aCart with: aNumber 
	
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotReceiveAnInvalidCreditCardNumberErrorDescription]. 
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:25:57'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:27:06' prior: 50888984!
checkOut: aCart with: aNumber 
	
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:27:22'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:27:22'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:27:22'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:27:22'!
PASSED!

!methodRemoval: Cashier #checkOut: stamp: 'MS 11/22/2020 15:27:56'!
checkOut: aCart 
	
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:28:43' prior: 50888601!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotReceiveAnEmptyCartErrorDescription.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:28:51'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:28:51'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:28:58'!
validCardNumber
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:29:10' prior: 50889058!
validCardNumber
	
	^1234.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:29:11'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:29:45' prior: 50888940!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier invalidCreditCardNumber|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	invalidCreditCardNumber := 'a'.
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:30:00' prior: 50889071!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:30:04'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:30:13'!
invalidCreditCardNumber
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:30:28' prior: 50889111!
invalidCreditCardNumber
	
	^'a'.! !

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:30:29'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:30:29'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:30:29'!
ERROR!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:30:29'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:30:29'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:30:51' prior: 50888774!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:30:56'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:30:56'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:30:56'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:33:53'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:33:54'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:33:54'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 15:34:20'!
test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 15:43:30' prior: 50889178!
test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidExpirationDate] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:43:38'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'MS 11/22/2020 15:43:59'!
invalidExpirationDate
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'MS 11/22/2020 15:45:26' prior: 50889216!
invalidExpirationDate
	
	^'a'. ! !

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:45:32'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 15:46:09' prior: 50889195!
test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidExpirationDate] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription.
	
	
	! !

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:46:14'!
ERROR!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 15:46:29'!
canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 15:47:00' prior: 50889266!
canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription
	
	^'Expiration date is invalid'.! !

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:47:01'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 15:47:53' prior: 50889245!
test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription.
	
	
	! !

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:48:19'!
ERROR!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:48:19'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:48:24'!
checkOut: aCart with: aSmallInteger and: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:49:41' prior: 50889308!
checkOut: aCart with: aNumber and: aDate
 
	aDate isKindOf: Date.
	
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:49:42'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:50:46' prior: 50889314!
checkOut: aCart with: aNumber and: aDate
 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:50:50'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:50:50'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:50:50'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:50:50'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 15:51:13' prior: 50889090!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber and: self validDate] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:51:19'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:51:27'!
validDate
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 15:53:22' prior: 50889388!
validDate
	
	^Date today.! !

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:53:25'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:53:25'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:53:25'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:53:25'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:53:25'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 15:53:44' prior: 50889140!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validDate] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 15:53:53' prior: 50889039!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validDate] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotReceiveAnEmptyCartErrorDescription.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:53:56'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 15:53:56'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 15:53:56'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 15:53:56'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 15:53:56'!
PASSED!

!methodRemoval: Cashier #checkOut:with: stamp: 'MS 11/22/2020 15:54:02'!
checkOut: aCart with: aNumber 
	
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:00:16'!
test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate from: self invalidOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidOwnerDescription.
	
	
	! !

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:00:25'!
ERROR!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 16:00:36'!
canNotCheckOutACartWithAnInvalidOwnerDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 16:01:36' prior: 50889499!
canNotCheckOutACartWithAnInvalidOwnerDescription
	
	^'Invalid owner.'! !

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:01:37'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'MS 11/22/2020 16:01:47'!
invalidOwner
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'MS 11/22/2020 16:02:50' prior: 50889514!
invalidOwner
	
	^'not30Characters'.! !

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:02:51'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:02:58'!
checkOut: aCart with: aSmallInteger and: aString from: aString4 
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:06:10' prior: 50889477!
test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate from: self invalidOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidOwnerErrorDescription.
	
	
	! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 16:06:40'!
canNotCheckOutACartWithAnInvalidOwnerErrorDescription
	
	^'Invalid owner.'! !

!methodRemoval: Cashier class #canNotCheckOutACartWithAnInvalidOwnerDescription stamp: 'MS 11/22/2020 16:06:40'!
canNotCheckOutACartWithAnInvalidOwnerDescription
	
	^'Invalid owner.'!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/22/2020 16:07:19'!
canNotCheckOutAnEmptyCartErrorDescription
	
	^'Cannot checkout an empty cart'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:07:19' prior: 50889433!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validDate] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:07:19' prior: 50889333!
checkOut: aCart with: aNumber and: aDate
 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!methodRemoval: Cashier class #canNotReceiveAnEmptyCartErrorDescription stamp: 'MS 11/22/2020 16:07:19'!
canNotReceiveAnEmptyCartErrorDescription
	
	^'Cannot checkout an empty cart'.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:07:32' prior: 50889526!
checkOut: aCart with: aNumber and: aDate from: anOwner

	(anOwner size = 30) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidOwnerErrorDescription]. 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:07:38'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 16:07:38'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 16:07:38'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 16:07:38'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 16:07:38'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:07:38'!
PASSED!

!methodRemoval: Cashier #checkOut:with:and: stamp: 'MS 11/22/2020 16:08:09'!
checkOut: aCart with: aNumber and: aDate
 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:08:27' prior: 50889567!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validDate from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:08:52' prior: 50889416!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validDate from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:08:59' prior: 50889366!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber and: self validDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:09:05' prior: 50889282!
test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription.
	
	
	! !

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:09:15'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 16:09:18'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 16:09:18'!
ERROR!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 16:09:18'!
ERROR!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 16:09:18'!
ERROR!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:09:18'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:09:22'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 16:09:22'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 16:09:22'!
ERROR!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 16:09:22'!
ERROR!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 16:09:22'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 16:09:24'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'MS 11/22/2020 16:09:37'!
validOwner
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'MS 11/22/2020 16:11:04' prior: 50889781!
validOwner
	^'Valid Owner'.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 16:11:07'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'MS 11/22/2020 16:13:49' prior: 50889518!
invalidOwner
	
	^'more than thirty characters woooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:14:43' prior: 50889605!
checkOut: aCart with: aNumber and: aDate from: anOwner

	(anOwner size >= 30) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidOwnerErrorDescription]. 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	
	aCart isEmpty ifTrue: [self error: self class canNotReceiveAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:15:01' prior: 50889799!
checkOut: aCart with: aNumber and: aDate from: anOwner

	(anOwner size >= 30) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidOwnerErrorDescription]. 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 16:15:06'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 16:15:06'!
FAILURE!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 16:15:06'!
FAILURE!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 16:15:06'!
FAILURE!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:15:06'!
FAILURE!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 16:15:13'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:15:44' prior: 50889821!
checkOut: aCart with: aNumber and: aDate from: anOwner

	(anOwner size <= 30) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidOwnerErrorDescription]. 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 16:15:46'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 16:15:46'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 16:15:46'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 16:15:46'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 16:15:46'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:23:05'!
validateCreditCardWith: anOwner and: aNumber from: aDate

	(anOwner size <= 30) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidOwnerErrorDescription]. 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:23:05' prior: 50889865!
checkOut: aCart with: aNumber and: aDate from: anOwner

	self validateCreditCardWith: anOwner and: aNumber from: aDate. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:25:13'!
assertValidOwner: anOwner

	^ (anOwner size <= 30) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidOwnerErrorDescription]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:25:13' prior: 50889905!
validateCreditCardWith: anOwner and: aNumber from: aDate

	self assertValidOwner: anOwner. 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:25:33' prior: 50889941!
validateCreditCardWith: anOwner and: aNumber from: aDate

	self assertValidOwner: anOwner. 
	(aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:25:55'!
assertValidExpirationDate: aDate

	^ (aDate isKindOf: Date) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:25:55' prior: 50889955!
validateCreditCardWith: anOwner and: aNumber from: aDate

	self assertValidOwner: anOwner. 
	self assertValidExpirationDate: aDate. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:26:07' prior: 50889976!
validateCreditCardWith: anOwner and: aNumber from: aDate

	self assertValidOwner: anOwner. 
	self assertValidExpirationDate: aDate. 
	(aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:26:22'!
assertValidCreditCardNumber: aNumber

	^ (aNumber isKindOf: Number) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:26:22' prior: 50889987!
validateCreditCardWith: anOwner and: aNumber from: aDate

	self assertValidOwner: anOwner. 
	self assertValidExpirationDate: aDate. 
	self assertValidCreditCardNumber: aNumber.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:27:53' prior: 50890006!
validateCreditCardWith: aNumber and: aDate from: anOwner

	self assertValidCreditCardNumber: aNumber.
	self assertValidExpirationDate: aDate.
	self assertValidOwner: anOwner.
	! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/22/2020 16:29:19' prior: 50889933!
assertValidOwner: anOwner

	^ (anOwner size <= 30) ifFalse: [self error: self class canNotCheckOutACartWithAnInvalidOwnerErrorDescription]! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/22/2020 16:34:17'!
signalInvalidOwner

	^ self error: self class canNotCheckOutACartWithAnInvalidOwnerErrorDescription! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/22/2020 16:34:18' prior: 50890024!
assertValidOwner: anOwner

	^ (anOwner size <= 30) ifFalse: [self signalInvalidOwner]! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/22/2020 16:34:39'!
signalInvalidExpirationDate

	^ self error: self class canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/22/2020 16:34:39' prior: 50889968!
assertValidExpirationDate: aDate

	^ (aDate isKindOf: Date) ifFalse: [self signalInvalidExpirationDate]! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/22/2020 16:35:02'!
signalInvalidCreditCardNumber

	^ self error: self class canNotCheckOutACartWithAnInvalidCardNumberErrorDescription! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/22/2020 16:35:02' prior: 50889998!
assertValidCreditCardNumber: aNumber

	^ (aNumber isKindOf: Number) ifFalse: [self signalInvalidCreditCardNumber]! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:44:03'!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate from: self invalidOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidOwnerErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:47:31' prior: 50890068!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier|
	
	aCatalog:= Dictionary new.
	aCatalog add: #aBook-> 40.
	
	aCart := self createCart.
	
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate from: self invalidOwner.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:48:56' prior: 50890086!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier|
	
	aCatalog:= Dictionary new.
	aCatalog add: #aBook-> 40.
	
	aCart := Cart new acceptingItemsOf: aCatalog keys.
	
	
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate from: self invalidOwner.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:50:54' prior: 50890101!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier|
	
	aCatalog:= Dictionary new.
	aCatalog add: #aBook-> 40.
	
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: #aBook. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog keys.
	
	aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate from: self invalidOwner.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:51:11' prior: 50890117!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier|
	
	aCatalog:= Dictionary new.
	aCatalog add: #aBook-> 40.
	
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: #aBook. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog keys.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 16:51:31'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 16:51:31'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'MS 11/22/2020 16:52:14'!
validExpirationDate
	
	^Date today.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:52:15' prior: 50889666!
test01ACashierCanNotReceiveAnEmptyCart

	|aCart aCashier|
	
	aCart := self createCart.
	
	aCashier := Cashier new.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:52:15' prior: 50889680!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 16:52:15' prior: 50889698!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #validDate stamp: 'MS 11/22/2020 16:52:15'!
validDate
	
	^Date today.!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 16:52:27' prior: 50889532!
test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self invalidOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidOwnerErrorDescription.
	
	
	! !

!classDefinition: #MerchantProcessor category: #TusLibros stamp: 'MS 11/22/2020 17:06:54'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 17:07:20' prior: 50890132!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: #aBook-> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: #aBook. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog keys for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:07:27'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 17:07:35'!
acceptingItemsOf: anArray for: aMerchantProcessor 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 17:10:45' prior: 50890263!
acceptingItemsOf: aCatalog for: aMerchantProcessor 

	^self new initializeAcceptingItemsOf: aCatalog for: aMerchantProcessor.! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:10:48'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'MS 11/22/2020 17:11:00'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'MS 11/22/2020 17:11:00'!
initializeAcceptingItemsOf: aCatalog for: aMerchantProcessor 
	self shouldBeImplemented.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'MS 11/22/2020 17:11:08' prior: 50890286!
initializeAcceptingItemsOf: aCatalog for: aMerchantProcessor 

	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:11:09'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:11:45'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:11:45'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'MS 11/22/2020 17:14:01' prior: 50890062!
assertValidCreditCardNumber: aNumber

	^ (aNumber isInteger) ifFalse: [self signalInvalidCreditCardNumber]! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:14:06'!
ERROR!

Date today.!

hola:= Date today.!


hola isKindOf: Date.!

hola isKindOf: Date.
!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 17:16:59'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:16:59'!
FAILURE!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 17:16:59'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 17:16:59'!
FAILURE!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 17:16:59'!
FAILURE!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:16:59'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:17:19'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:17:50'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:17:50'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:19:13'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:19:13'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:20:46'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:20:55'!
FAILURE!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:20:55'!
FAILURE!
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 17:21:55' prior: 50889921!
checkOut: aCart with: aNumber and: aDate from: anOwner

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.! !

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:21:57'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:22:00'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 17:22:00'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:22:00'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 17:22:00'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 17:22:00'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 17:22:00'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:22:00'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:22:00'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 17:22:12'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:22:12'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 17:22:12'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 17:22:12'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 17:22:12'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:22:12'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:22:12'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 17:22:56'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:23:00'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 17:23:03'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 17:23:05'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 17:23:07'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:23:09'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:23:09'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 17:25:15' prior: 50890239!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog keys for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:25:17'!
ERROR!

aCatalogue := Dictionary new.!

aCatalogue  add: 'aBook'-> 40.!

aCatalogue keys.!

aCatalogue keys includes: 'aBook'.!

aCatalogue keys includes: 'aBook'.!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:28:28'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 17:28:37' prior: 50890473!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 1 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog keys for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:28:39'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 17:28:48' prior: 50890505!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: (aCatalog keys).
	aCart add: 1 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog keys for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:28:51'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 17:30:18' prior: 50890529!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: (aCatalog keys).
	aCart add: 1 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: (aCatalog keys) for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 17:31:30' prior: 50890553!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog keys for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 17:36:22' prior: 50890376!
checkOut: aCart with: aNumber and: aDate from: anOwner

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	(catalog includes: (aCart items first)) ifFalse: [self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.].! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 17:36:29'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:36:29'!
ERROR!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 17:36:29'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 17:36:29'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 17:36:29'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:36:29'!
ERROR!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 17:40:22'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:40:22'!
ERROR!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 17:40:23'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 17:40:23'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 17:40:23'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:40:23'!
ERROR!

!testRun: #CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:40:25'!
ERROR!
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 17:47:34' prior: 50890595!
checkOut: aCart with: aNumber and: aDate from: anOwner

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	(catalog includes: (aCart items first)) ifFalse: [self error: self class canNotCheckOutACartWithDifferentCatalogErrorDescription.].! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 17:58:52' prior: 50890658!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) *aCart occurrencesOf: item] ifEmpty:[0].! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 17:59:05' prior: 50890672!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) *aCart occurrencesOf: item] ifEmpty:[0].
	
	^checkOutTotal .! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 17:59:19'!
no_test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 17:59:19'!
test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 17:59:26'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 17:59:26'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 17:59:26'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 17:59:26'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:59:26'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 17:59:27'!
ERROR!
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 18:00:27' prior: 50890686!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	checkOutTotal := catalog sum: [:item |(catalog at: item) *aCart occurrencesOf: item] ifEmpty:[0].
	
	^checkOutTotal .! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 18:00:32'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 18:00:32'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 18:00:32'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 18:00:32'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:00:32'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:00:32'!
ERROR!
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 18:00:52' prior: 50890760!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) *aCart occurrencesOf: item] ifEmpty:[0].
	
	^checkOutTotal .! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 18:02:38' prior: 50890574!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:02:41'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:02:42'!
ERROR!
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 18:03:13' prior: 50890797!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) * (aCart occurrencesOf: item)] ifEmpty:[0].
	
	^checkOutTotal .! !

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:03:14'!
ERROR!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 18:03:28'!
receivedCheckoutAmount
	self shouldBeImplemented.! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/22/2020 18:07:57' prior: 50890839!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription].
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) * (aCart occurrencesOf: item)] ifEmpty:[0].
	
	merchantProcessor checkOut: checkOutTotal with: aNumber and: aDate from: anOwner.! !

!classDefinition: #MerchantProcessor category: #TusLibros stamp: 'MS 11/22/2020 18:11:43'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'receivedChekoutAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: #TusLibros stamp: 'MS 11/22/2020 18:11:45'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'receivedChekoutAmount receivedChekoutCreditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: #TusLibros stamp: 'MS 11/22/2020 18:11:47'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'receivedChekoutAmount receivedChekoutCreditCardNumber receivedChekoutExpirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: #TusLibros stamp: 'MS 11/22/2020 18:11:47'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'receivedChekoutAmount receivedChekoutCreditCardNumber receivedChekoutExpirationDate receivedChekoutCreditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 18:11:40'!
checkOut: checkOutTotal with: aNumber and: aDate from: anOwner
	
	receivedChekoutAmount:= checkOutTotal.
	receivedChekoutCreditCardNumber:= aNumber .
	receivedChekoutExpirationDate:= aDate. 
	receivedChekoutCreditCardOwner:= anOwner ! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 18:11:55'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 18:11:55'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 18:11:55'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 18:11:55'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:11:55'!
ERROR!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:11:55'!
ERROR!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/22/2020 18:12:44' prior: 50890858!
receivedCheckoutAmount
	^receivedChekoutAmount .! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 18:12:48'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 18:12:48'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 18:12:48'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 18:12:49'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:12:49'!
PASSED!

!methodRemoval: CashierTest #no_test02ACashierCanNotCheckOutACartWithADifferentCatalogue stamp: 'MS 11/22/2020 18:14:30'!
no_test02ACashierCanNotCheckOutACartWithADifferentCatalogue

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithDifferentCatalogErrorDescription.
	
	
	!

!methodRemoval: Cashier class #canNotCheckOutACartWithDifferentCatalogErrorDescription stamp: 'MS 11/22/2020 18:14:51'!
canNotCheckOutACartWithDifferentCatalogErrorDescription
	
	^'Cannot check out a cart with a different catalog'!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/22/2020 18:14:55'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 18:14:56'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 18:14:56'!
PASSED!

!testRun: #CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 18:14:56'!
PASSED!

!testRun: #CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:14:56'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 18:15:13'!
test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/22/2020 18:15:13'!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 18:15:19'!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/22/2020 18:15:19'!
test04ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription.
	
	
	!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 18:15:24'!
test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self invalidOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidOwnerErrorDescription.
	
	
	! !

!methodRemoval: CashierTest #test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/22/2020 18:15:24'!
test05ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner

	|aCatalog aCart aCashier|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self invalidOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidOwnerErrorDescription.
	
	
	!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/22/2020 18:15:33'!
test05ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !

!methodRemoval: CashierTest #test06ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/22/2020 18:15:33'!
test06ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	!

----QUIT----(22 November 2020 18:33:35) CuisUniversity-4365.image priorSource: 17824199!

----STARTUP---- (25 November 2020 16:36:45) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


Object subclass: #MerchantProcessor
	instanceVariableNames: 'receivedChekoutAmount receivedChekoutCreditCardNumber receivedChekoutExpirationDate receivedChekoutCreditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: #TusLibros stamp: 'MS 11/25/2020 16:43:29'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'receivedChekoutAmount receivedChekoutCreditCardNumber receivedChekoutExpirationDate receivedChekoutCreditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'MS 11/25/2020 16:46:44' prior: 50890153!
validExpirationDate
	
	^Date today.! !
!CashierTest methodsFor: 'support' stamp: 'MS 11/25/2020 16:48:43' prior: 50891197!
validExpirationDate
	
	^GregorianMonthOfYear today.! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 16:51:10' prior: 50890049!
assertValidExpirationDate: aDate

	^ (aDate isKindOf: GregorianMonthOfYear) ifFalse: [self signalInvalidExpirationDate]! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/25/2020 16:52:09'!
validateCartNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription]! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/25/2020 16:52:10' prior: 50890863!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	self validateCartNotEmpty: aCart.
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) * (aCart occurrencesOf: item)] ifEmpty:[0].
	
	merchantProcessor checkOut: checkOutTotal with: aNumber and: aDate from: anOwner.! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 16:52:55'!
assertCartNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 16:52:55' prior: 50891219!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	self assertCartNotEmpty: aCart.
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) * (aCart occurrencesOf: item)] ifEmpty:[0].
	
	merchantProcessor checkOut: checkOutTotal with: aNumber and: aDate from: anOwner.! !

!methodRemoval: Cashier #validateCartNotEmpty: stamp: 'MS 11/25/2020 16:52:55'!
validateCartNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self class canNotCheckOutAnEmptyCartErrorDescription]!
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 16:53:45'!
signalCartNotEmpty

	^ self error: self class canNotCheckOutAnEmptyCartErrorDescription! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 16:53:45' prior: 50891234!
assertCartNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self signalCartNotEmpty]! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 16:55:25'!
test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !

!classDefinition: #FailingMerchantProcessor category: #TusLibros stamp: 'MS 11/25/2020 17:05:23'!
MerchantProcessor subclass: #FailingMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 17:04:56' prior: 50891273!
test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= FailingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchanProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier merchantProcessorIsNotWorking.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 17:05:47' prior: 50891303!
test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= FailingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchanProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier merchantProcessorIsNotWorkingErrorDescription.
	
	! !

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:05:53'!
ERROR!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:05:53'!
ERROR!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/25/2020 17:06:07'!
merchantProcessorIsNotWorkingErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/25/2020 17:06:32' prior: 50891359!
merchantProcessorIsNotWorkingErrorDescription
	
	^'Merchant Processor is not working'.! !

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:06:33'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'MS 11/25/2020 17:08:00' prior: 50891201!
validExpirationDate
	
	^GregorianMonthOfYear yearNumber: 2030 monthNumber: 8.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 17:08:14'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 17:08:14'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 17:08:14'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 17:08:14'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 17:08:14'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:08:14'!
FAILURE!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:08:14'!
FAILURE!

MerchantProcessor subclass: #WorkingMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #WorkingMerchantProcessor category: #TusLibros stamp: 'MS 11/25/2020 17:08:53'!
MerchantProcessor subclass: #WorkingMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!WorkingMerchantProcessor methodsFor: 'no messages' stamp: 'MS 11/25/2020 17:08:59' overrides: 50890917!
checkOut: checkOutTotal with: aNumber and: aDate from: anOwner
	
	receivedChekoutAmount:= checkOutTotal.
	receivedChekoutCreditCardNumber:= aNumber .
	receivedChekoutExpirationDate:= aDate. 
	receivedChekoutCreditCardOwner:= anOwner ! !
!WorkingMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:09:21' overrides: 50890950!
receivedCheckoutAmount
	^receivedChekoutAmount .! !

!classRenamed: #MerchantProcessor as: #MerchantProcessorSimulator stamp: 'MS 11/25/2020 17:09:38'!
Smalltalk renameClassNamed: #MerchantProcessor as: #MerchantProcessorSimulator!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:09:38' prior: 50891131!
test05ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= MerchantProcessorSimulator new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 17:10:16' prior: 50891444!
test05ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchanProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchanProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchanProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchanProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:10:57' prior: 50890917!
checkOut: checkOutTotal with: aNumber and: aDate from: anOwner
	
	self subclassResponsibility.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:11:11' prior: 50890950!
receivedCheckoutAmount
	self subclassResponsibility.! !
!FailingMerchantProcessor methodsFor: 'no messages' stamp: 'MS 11/25/2020 17:11:59' overrides: 50891487!
checkOut: checkOutTotal with: aNumber and: aDate from: anOwner

	! !
!FailingMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:12:14' overrides: 50891494!
receivedCheckoutAmount

	! !
!FailingMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:14:12' prior: 50891500 overrides: 50891487!
checkOut: checkOutTotal with: aNumber and: aDate from: anOwner

	^400.! !
!FailingMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:15:02' prior: 50891506 overrides: 50891494!
receivedCheckoutAmount

	^receivedChekoutAmount .

	! !
!FailingMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:15:41' prior: 50891511 overrides: 50891487!
checkOut: checkOutTotal with: aNumber and: aDate from: anOwner

	receivedChekoutAmount:= checkOutTotal.
	receivedChekoutCreditCardNumber:= aNumber .
	receivedChekoutExpirationDate:= aDate. 
	receivedChekoutCreditCardOwner:= anOwner. 

	^400.! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/25/2020 17:17:23' prior: 50891241!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal statusCode|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	self assertCartNotEmpty: aCart.
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) * (aCart occurrencesOf: item)] ifEmpty:[0].
	
	statusCode:= merchantProcessor checkOut: checkOutTotal with: aNumber and: aDate from: anOwner.
	
	self assertRequestWasSuccesful: statusCode.
	! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 17:19:39'!
assertRequestWasSuccesful: statusCode

	statusCode = 400 ifTrue:[ self error: self class].! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 17:20:29' prior: 50891552!
assertRequestWasSuccesful: statusCode

	statusCode = 400 ifTrue:[ self error: self class merchantProcessorIsNotWorkingErrorDescription].! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 17:21:09'!
signalMerchantProcessorIsNotWorking

	^ self error: self class merchantProcessorIsNotWorkingErrorDescription! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 17:21:09' prior: 50891558!
assertRequestWasSuccesful: statusCode

	statusCode = 400 ifTrue:[ self signalMerchantProcessorIsNotWorking].! !

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 17:21:53'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 17:21:53'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 17:21:53'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 17:21:53'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 17:21:53'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:21:53'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 17:22:16'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 17:22:16'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 17:22:16'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 17:22:16'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 17:22:17'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:22:17'!
PASSED!
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 17:24:48' prior: 50891572!
assertRequestWasSuccesful: statusCode

	statusCode = 0 ifFalse:[ self signalMerchantProcessorIsNotWorking].! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 17:24:52'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 17:24:53'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 17:24:53'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 17:24:53'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 17:24:53'!
ERROR!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:24:53'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 17:24:53'!
ERROR!
!WorkingMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 17:25:16' prior: 50891422 overrides: 50891487!
checkOut: checkOutTotal with: aNumber and: aDate from: anOwner
	
	receivedChekoutAmount:= checkOutTotal.
	receivedChekoutCreditCardNumber:= aNumber .
	receivedChekoutExpirationDate:= aDate. 
	receivedChekoutCreditCardOwner:= anOwner.
	
	^0.! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 17:25:20'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 17:25:20'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 17:25:20'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 17:25:20'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 17:25:20'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 17:25:20'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 17:33:07'!
test07ACashierSendsAValidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= FailingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner.
	
	self assert: (self isValidTransactionAmount: aMerchantProcessorSimulator receivedCheckoutAmount)
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 17:33:22' prior: 50891326!
test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= FailingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier merchantProcessorIsNotWorkingErrorDescription.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 17:33:41' prior: 50891465!
test05ACashierPerformsASuccessfulCheckOut

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self validOwner.
	
	self assert: aMerchantProcessorSimulator receivedCheckoutAmount equals: 80.
	
	! !

!testRun: #CashierTest #test07ACashierSendsAValidTransactionAmount stamp: 'MS 11/25/2020 17:33:51'!
ERROR!

!testRun: #CashierTest #test07ACashierSendsAValidTransactionAmount stamp: 'MS 11/25/2020 17:33:51'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 17:34:07' prior: 50891698!
test07ACashierSendsAValidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner.
	
	self assert: (self isValidTransactionAmount: aMerchantProcessorSimulator receivedCheckoutAmount)
	
	! !

!testRun: #CashierTest #test07ACashierSendsAValidTransactionAmount stamp: 'MS 11/25/2020 17:34:09'!
ERROR!
!CashierTest methodsFor: 'assertions' stamp: 'MS 11/25/2020 17:34:20'!
isValidTransactionAmount: aSmallInteger 
	self shouldBeImplemented.! !

50 digitLength !

50 digitLength !

50000000 digitLength!

50000000 digitLength!

50000000 decimalDigitLength !

50000000 decimalDigitLength !

50000000.05 decimalDigitLength!

50000000,05 decimalDigitLength!

50000000.05 decimalDigitLength!

50000000.05 fractionPart !

50000000.05 fractionPart !

50000000.05 integerPart!

50000000.05 integerPart!

50000000.05  printString!

50000000.05  printString!

123500050000000.05  printString!

123500050000000.05  printString!

123500050000000 printString !

123500050000000 printString !

123500050000000.005 printString !

123500050000000.005 printString !

123500050000000.005 mod: 1!

123500050000000.005 mod: 1!

123500050000000.05 mod: 1 !

123500050000000.05 mod: 1 !

123500050000000.00005 mod: 1!

123500050000000.00005 mod: 1!

123500050000000.5 mod: 1!

123500050000000.5 mod: 1!

123500050000000.005 mod: 1!

123500050000000.005 mod: 1!

123500050000000.57 mod: 1!

123500050000000.57 mod: 1!

4 mod: 1!

4 mod: 1!

45444444444444444444 mod: 1!

45444444444444444444 mod: 1!

23.09 * 100 isInteger!

23.09 * 100 isInteger!

(23.09 * 100) isInteger!

(23.09 * 100) isInteger!

(23.09*100) asIntegerOrFloat !

(23.09*100) asIntegerOrFloat !

((23.09*100) asIntegerOrFloat)  isInteger !

((23.09*100) asIntegerOrFloat)  isInteger !

(23.099*100) asInteger!

(23.099*100) asInteger!

x _ 3.99 asFraction.			"convert number to fraction"!

123500050000000.005 integerPart !

123500050000000.005 integerPart !

123500050000000.005 fractionPart !

123500050000000.005 fractionPart !

123500050000000.005 asInteger !

123500050000000.005 asInteger !

454.56 fractionPart !

454.56 fractionPart !

(454.56*100) fractionPart!

(454.56*100) fractionPart!

(454.561*100) fractionPart !

(454.561*100) fractionPart !

45444444444444444444 numberOfDigitsInBase: 10 <= 15. !

45444444444444444444 numberOfDigitsInBase: 10 !

45444444444444444444 numberOfDigitsInBase: 10 !

454444444444444444442 numberOfDigitsInBase: 10!

454444444444444444442 numberOfDigitsInBase: 10!
!CashierTest methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:02:15' prior: 50891797!
isValidTransactionAmount: anAmount
	
	^((anAmount asInteger numberOfDigitsInBase: 10) <= 15) and: ((anAmount*100) fractionPart = 0.0).! !

!testRun: #CashierTest #test07ACashierSendsAValidTransactionAmount stamp: 'MS 11/25/2020 18:02:18'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:02:18'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:02:18'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:02:18'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:02:18'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:02:18'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:02:18'!
PASSED!

!testRun: #CashierTest #test07ACashierSendsAValidTransactionAmount stamp: 'MS 11/25/2020 18:02:18'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:03:02' prior: 50891772!
test07ACashierSendsAValidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.005.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner.
	
	self assert: (self isValidTransactionAmount: aMerchantProcessorSimulator receivedCheckoutAmount)
	
	! !

!testRun: #CashierTest #test07ACashierSendsAValidTransactionAmount stamp: 'MS 11/25/2020 18:03:04'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:03:17' prior: 50891902!
test07ACashierSendsAValidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner.
	
	self assert: (self isValidTransactionAmount: aMerchantProcessorSimulator receivedCheckoutAmount)
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:05:58' prior: 50891927!
test07ACashierSendsAValidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.005.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner.
	
	self assert: (self isValidTransactionAmount: aMerchantProcessorSimulator receivedCheckoutAmount)
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:08:09' prior: 50891949!
test07ACashierSendsAValidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.005.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier InvalidTransactionAmountErrorDescription.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:08:59'!
test07ACashierCanNotCheckOutInvalidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.005.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier InvalidTransactionAmountErrorDescription.
	
	! !

!methodRemoval: CashierTest #test07ACashierSendsAValidTransactionAmount stamp: 'MS 11/25/2020 18:08:59'!
test07ACashierSendsAValidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.005.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier InvalidTransactionAmountErrorDescription.
	
	!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:10:31'!
test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.005.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier InvalidTransactionAmountErrorDescription.
	
	! !

!methodRemoval: CashierTest #test07ACashierCanNotCheckOutInvalidTransactionAmount stamp: 'MS 11/25/2020 18:10:34'!
test07ACashierCanNotCheckOutInvalidTransactionAmount

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.005.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier InvalidTransactionAmountErrorDescription.
	
	!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:10:51' prior: 50892038!
test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 4000000000000000000000000000000000000000.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier InvalidTransactionAmountErrorDescription.
	
	! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/25/2020 18:11:31' prior: 50891535!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal statusCode|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	self assertCartNotEmpty: aCart.
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) * (aCart occurrencesOf: item)] ifEmpty:[0].
	
	statusCode:= merchantProcessor checkOut: checkOutTotal with: aNumber and: aDate from: anOwner.
	
	self assertRequestWasSuccesful: statusCode.
	
	self assert: (self isValidTransactionAmount: merchantProcessor receivedCheckoutAmount).
	! !

!methodRemoval: CashierTest #isValidTransactionAmount: stamp: 'MS 11/25/2020 18:12:07'!
isValidTransactionAmount: anAmount
	
	^((anAmount asInteger numberOfDigitsInBase: 10) <= 15) and: ((anAmount*100) fractionPart = 0.0).!
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:13:23'!
isValidTransactionAmount: anAmount
	
	^((anAmount asInteger numberOfDigitsInBase: 10) <= 15).! !

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:13:34'!
ERROR!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:13:34'!
ERROR!
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/25/2020 18:13:44'!
InvalidTransactionAmountErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error handling' stamp: 'MS 11/25/2020 18:14:07' prior: 50892150!
InvalidTransactionAmountErrorDescription
	^ 'Invalid Transaction Amount'! !
!Cashier methodsFor: 'actions' stamp: 'MS 11/25/2020 18:16:23' prior: 50892109!
checkOut: aCart with: aNumber and: aDate from: anOwner

	|checkOutTotal statusCode|
	checkOutTotal  := 0.

	self validateCreditCardWith: aNumber and: aDate from: anOwner. 
	
	self assertCartNotEmpty: aCart.
	
	checkOutTotal := catalog keys sum: [:item |(catalog at: item) * (aCart occurrencesOf: item)] ifEmpty:[0].
	self assertTrasactionAmountIsValid: checkOutTotal.
	
	statusCode:= merchantProcessor checkOut: checkOutTotal with: aNumber and: aDate from: anOwner.
	
	self assertRequestWasSuccesful: statusCode.
	! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:17:59'!
assertTrasactionAmountIsValid: anAmount
	
	^((anAmount asInteger numberOfDigitsInBase: 10) <= 15).! !

!methodRemoval: Cashier #isValidTransactionAmount: stamp: 'MS 11/25/2020 18:17:59'!
isValidTransactionAmount: anAmount
	
	^((anAmount asInteger numberOfDigitsInBase: 10) <= 15).!
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:19:30' prior: 50892180!
assertTrasactionAmountIsValid: anAmount
	
	((anAmount asInteger numberOfDigitsInBase: 10) <= 15) ifFalse: [self error class signalInvalidTransactionAmount].! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:19:55' prior: 50892192!
assertTrasactionAmountIsValid: anAmount
	
	((anAmount asInteger numberOfDigitsInBase: 10) <= 15) ifFalse: [self error: self class signalInvalidTransactionAmount].! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:20:11' prior: 50892200!
assertTrasactionAmountIsValid: anAmount
	
	((anAmount asInteger numberOfDigitsInBase: 10) <= 15) ifFalse: [self error: self class signalInvalidTransactionAmountErrorDescription].! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:21:03'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:21:03'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:21:03'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:21:03'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:21:03'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:21:03'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:21:03'!
ERROR!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:21:03'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MS 11/25/2020 18:21:12'!
signalInvalidTransactionAmountErrorDescription
	self shouldBeImplemented.! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:21:29' prior: 50892208!
assertTrasactionAmountIsValid: anAmount
	
	((anAmount asInteger numberOfDigitsInBase: 10) <= 15) ifFalse: [self error: self class InvalidTransactionAmountErrorDescription].! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:21:56'!
signalInvalidTransactionAmountErrorDescription

	^ self error: self class InvalidTransactionAmountErrorDescription! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:21:56' prior: 50892253!
assertTrasactionAmountIsValid: anAmount
	
	((anAmount asInteger numberOfDigitsInBase: 10) <= 15) ifFalse: [self signalInvalidTransactionAmountErrorDescription].! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:22:09'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:22:09'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:22:09'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:22:09'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:22:09'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:22:09'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:22:09'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:23:08'!
test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Dictionary new.
	aCatalog add: 'aBook' -> 40.0000005.
	aCart := Cart acceptingItemsOf: aCatalog keys.
	aCart add: 2 of: 'aBook'. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier InvalidTransactionAmountErrorDescription.
	
	! !

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:23:24'!
FAILURE!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:23:24'!
FAILURE!
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:24:19' prior: 50892268!
assertTrasactionAmountIsValid: anAmount
	
		(((anAmount asInteger numberOfDigitsInBase: 10) <= 15) and: 
		((anAmount*100) fractionPart = 0.0))
		
		ifFalse: [self signalInvalidTransactionAmountErrorDescription].! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:24:26'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:24:26'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:24:26'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:24:26'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:24:26'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:24:26'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:24:26'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:24:26'!
PASSED!
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:27:04'!
numberHasLessThanFifteenDigits: anAmount

	^ (anAmount asInteger numberOfDigitsInBase: 10) <= 15! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:27:04' prior: 50892335!
assertTrasactionAmountIsValid: anAmount
	
		(((self numberHasLessThanFifteenDigits: anAmount)) and: 
		((anAmount*100) fractionPart = 0.0))
		
		ifFalse: [self signalInvalidTransactionAmountErrorDescription].! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:27:35' prior: 50892382!
assertTrasactionAmountIsValid: anAmount
	
		((self numberHasLessThanFifteenDigits: anAmount) and: 
		((anAmount*100) fractionPart = 0.0))
		
		ifFalse: [self signalInvalidTransactionAmountErrorDescription].! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:29:13' prior: 50892392!
assertTrasactionAmountIsValid: anAmount
	
		((self numberHasLessThanFifteenDigits: anAmount) and:
		(self hasTooManyDecimals:anAmount))
		
		ifFalse: [self signalInvalidTransactionAmountErrorDescription].! !
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:29:42'!
hasTooManyDecimals: anAmount

((anAmount*100) fractionPart = 0.0).! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:29:52'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:29:52'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:29:52'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:29:52'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:29:52'!
ERROR!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:29:52'!
FAILURE!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:29:53'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:29:53'!
FAILURE!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:30:17'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:30:17'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:30:17'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:30:17'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:30:17'!
ERROR!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:30:17'!
FAILURE!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:30:17'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:30:17'!
FAILURE!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:30:31'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'MS 11/25/2020 18:30:59' prior: 50892411!
hasTooManyDecimals: anAmount

  ^((anAmount*100) fractionPart = 0.0).! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:31:05'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:31:05'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:31:05'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:31:05'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:31:05'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:31:05'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:31:05'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:31:05'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:40:55' prior: 50891094!
test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self validExpirationDate from: self invalidOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidOwnerErrorDescription.
	
	
	! !

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:40:57'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:40:57'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:40:57'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:40:57'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:40:57'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:40:57'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:40:57'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:40:57'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:40:57'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:41:10' prior: 50891056!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aCashier := Cashier acceptingItemsOf: aCatalog.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:41:26' prior: 50892578!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:41:29' prior: 50892598!
test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self validCardNumber and: self invalidExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidExpirationDateErrorDescription.
	
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/25/2020 18:41:45' prior: 50891018!
test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber

	|aCatalog aCart aCashier aMerchantProcessorSimulator|
	
	aCatalog:= Array new.
	aCart := self createCart.
	aCart add: 2 of: self itemSellByTheStore. 
	
	
	aMerchantProcessorSimulator:= WorkingMerchantProcessor new.
	
	aCashier := Cashier acceptingItemsOf: aCatalog for: aMerchantProcessorSimulator.
	
	self  should: [aCashier checkOut: aCart with: self invalidCreditCardNumber and: self validExpirationDate  from: self validOwner] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckOutACartWithAnInvalidCardNumberErrorDescription.
	
	
	! !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:42:07'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:42:08'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:42:08'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:42:08'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:42:08'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:42:08'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:42:08'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:42:08'!
PASSED!

!methodRemoval: Cashier #initializeAcceptingItemsOf: stamp: 'MS 11/25/2020 18:42:18'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.!

!methodRemoval: Cashier class #acceptingItemsOf: stamp: 'MS 11/25/2020 18:44:04'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:44:09'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:44:09'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:44:09'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:44:09'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:44:09'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:44:09'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:44:09'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:44:09'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:44:17'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:44:18'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:44:18'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:44:18'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:44:18'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:44:18'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:44:18'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:44:18'!
PASSED!

!methodRemoval: Cashier class #signalInvalidTransactionAmountErrorDescription stamp: 'MS 11/25/2020 18:44:57'!
signalInvalidTransactionAmountErrorDescription
	self shouldBeImplemented.!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:45:01'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:45:01'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:45:01'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:45:01'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:45:01'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:45:01'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:45:01'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:45:01'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/25/2020 18:45:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/25/2020 18:45:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:45:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CashierTest #test01ACashierCanNotReceiveAnEmptyCart stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CashierTest #test02ACashierCanNotCheckOutWhenItReceivesAnInvalidCardNumber stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CashierTest #test03ACashierCanNotCheckOutWhenItReceivesAnInvalidExpirationDate stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CashierTest #test04ACashierCanNotCheckOutWhenItReceivesAnInvalidOwner stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CashierTest #test05ACashierPerformsASuccessfulCheckOut stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CashierTest #test06ACashierCanNotPerformsASuccessfulCheckOutWhenMerchantProcessorIsNotWorking stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CashierTest #test07ACashierCanNotCheckOutWhenTheTransactionAmountIsTooBig stamp: 'MS 11/25/2020 18:46:01'!
PASSED!

!testRun: #CashierTest #test08ACashierCanNotCheckOutWhenTheTransactionAmountIsHasTooManyDecimals stamp: 'MS 11/25/2020 18:46:01'!
PASSED!