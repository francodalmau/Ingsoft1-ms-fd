

----STARTUP---- (28 November 2020 14:38:25) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4384.image!


----End fileIn of /home/franco/Documents/smallTalk/linux64/TusLibros-33.st----!

TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FD 11/28/2020 14:45:40'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibrosInterface' stamp: 'FD 11/28/2020 14:59:36'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosInterface'!
!TusLibrosInterfaceTest methodsFor: 'nil' stamp: 'FD 11/28/2020 15:00:08'!
test01CanNotCreateACartWithAnInvalidClientId

	| tusLibrosInterface invalidClientId password |
	
	
	tusLibrosInterface := TusLibrosInterface new.
	invalidClientId := 1.
	password := 1.
	
	self should: [ tusLibrosInterface createCartFor: invalidClientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:00:18'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:00:18'!
ERROR!
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:00:31'!
invalidClientIdErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:00:41' prior: 50868368!
invalidClientIdErrorDescription
	^ 'Invalid client id'! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:00:43'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:00:50'!
createCartFor: aSmallInteger withPassword: aSmallInteger2 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:01:19' prior: 50868383!
createCartFor: aClientId withPassword: aPassword
	
	self error: self class invalidClientIdErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:01:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:01:23'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:03:33' prior: 50868345!
test01CanNotCreateACartWithAnInvalidClientId

	| tusLibrosInterface invalidClientId password |
	
	
	tusLibrosInterface := TusLibrosInterface new.
	invalidClientId := testObjectsFactory invalidClientId.
	password := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface createCartFor: invalidClientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: 'nil' stamp: 'FD 11/28/2020 15:04:06' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'FD 11/28/2020 15:04:21'!
invalidClientId

	^1.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:04:29'!
invalidPassword

	^1.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:04:32'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:05:19'!
test02CanNotCreateACartWithAnInvalidPassword

	| tusLibrosInterface validClientId incalidPassword |
	
	
	tusLibrosInterface := TusLibrosInterface new.
	validClientId := testObjectsFactory validClientId.
	incalidPassword := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface createCartFor: validClientId withPassword: incalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:05:25' prior: 50868439!
test02CanNotCreateACartWithAnInvalidPassword

	| tusLibrosInterface validClientId invalidPassword |
	
	
	tusLibrosInterface := TusLibrosInterface new.
	validClientId := testObjectsFactory validClientId.
	invalidPassword := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface createCartFor: validClientId withPassword: invalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:05:44' prior: 50868457!
test02CanNotCreateACartWithAnInvalidPassword

	| tusLibrosInterface validClientId invalidPassword |
	
	
	tusLibrosInterface := TusLibrosInterface new.
	validClientId := testObjectsFactory validClientId.
	invalidPassword := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface createCartFor: validClientId withPassword: invalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:05:59'!
validClientId

	^0.! !

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:06:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:06:05'!
ERROR!
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:06:10'!
invalidPasswordErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:06:25' prior: 50868505!
invalidPasswordErrorDescription
	^ 'Invalid password'.! !

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:06:28'!
FAILURE!

!classDefinition: 'TusLibrosInterface class' category: 'TusLibros' stamp: 'FD 11/28/2020 15:08:44'!
TusLibrosInterface class
	instanceVariableNames: 'aClientLIst'!
!TusLibrosInterface class methodsFor: 'nil' stamp: 'FD 11/28/2020 15:08:41'!
withClientList: aClientList

	^self new initializeWith: aClientLIst.! !

TusLibrosInterface class
	instanceVariableNames: ''!

!classDefinition: 'TusLibrosInterface class' category: 'TusLibros' stamp: 'FD 11/28/2020 15:09:09'!
TusLibrosInterface class
	instanceVariableNames: ''!
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:09:56' prior: 50868525!
withClientList: aClientList

	^self new initializeWith: aClientList.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 11/28/2020 15:10:22'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:10:18'!
initializeWith: aClientList

	clientList := aClientList.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:11:23' prior: 50868389!
createCartFor: aClientId withPassword: aPassword
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	self error: self class invalidPasswordErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:11:25'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:11:25'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:11:58' prior: 50868404!
test01CanNotCreateACartWithAnInvalidClientId

	| tusLibrosInterface invalidClientId password |
	
	
	tusLibrosInterface := TusLibrosInterface withClientList: testObjectsFactory defaultClientList.
	invalidClientId := testObjectsFactory invalidClientId.
	password := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface createCartFor: invalidClientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:12:23' prior: 50868475!
test02CanNotCreateACartWithAnInvalidPassword

	| tusLibrosInterface validClientId invalidPassword |
	
	
	tusLibrosInterface := TusLibrosInterface withClientList: testObjectsFactory defaultClientList.
	validClientId := testObjectsFactory validClientId.
	invalidPassword := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface createCartFor: validClientId withPassword: invalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:12:44'!
defaultClientList

	^Dictionary new.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:13:24' prior: 50868615!
defaultClientList

	^Dictionary new
		at: self validClientId put: self validPassword;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:13:32'!
validPassword

	^0.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:13:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:13:39'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:15:48'!
createTusLibrosInterface

	^ nil.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:16:18' prior: 50868575!
test01CanNotCreateACartWithAnInvalidClientId

	| tusLibrosInterface invalidClientId password |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidClientId := testObjectsFactory invalidClientId.
	password := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface createCartFor: invalidClientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:16:32' prior: 50868595!
test02CanNotCreateACartWithAnInvalidPassword

	| tusLibrosInterface validClientId invalidPassword |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	validClientId := testObjectsFactory validClientId.
	invalidPassword := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface createCartFor: validClientId withPassword: invalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidPasswordErrorDescription.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:16:43' prior: 50868639!
createTusLibrosInterface

	^ TusLibrosInterface withClientList: self defaultClientList.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 11/28/2020 15:16:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:16:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:16:48'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:20:37'!
test03CreatesANewCart

	| tusLibrosInterface validClientId validPassword newCartId |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	validClientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
	newCartId := tusLibrosInterface createCartFor: validClientId withPassword: validPassword.
	
	self assert: (tusLibrosInterface listCart: newCartId  isEmpty).
	! !

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:20:53'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:20:53'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:21:54' prior: 50868557!
createCartFor: aClientId withPassword: aPassword
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:23:38'!
withClientList: aClientList withCatalog: aCatalog

	^self new initializeWith: aClientList.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:24:14'!
initializeWithClientList: aClientList

	clientList := aClientList.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:24:14' prior: 50868538!
withClientList: aClientList

	^self new initializeWithClientList: aClientList.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:24:14' prior: 50868784!
withClientList: aClientList withCatalog: aCatalog

	^self new initializeWithClientList: aClientList.! !

!methodRemoval: TusLibrosInterface #initializeWith: stamp: 'FD 11/28/2020 15:24:14'!
initializeWith: aClientList

	clientList := aClientList.!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 11/28/2020 15:24:39'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:24:37'!
initializeWithClientList: aClientList withCatalog: aCatalog

	clientList := aClientList.
	catalog := aCatalog.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:25:15' prior: 50868802!
withClientList: aClientList withCatalog: aCatalog

	^self new initializeWithClientList: aClientList withCatalog: aCatalog.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:25:39' prior: 50868682!
createTusLibrosInterface

	^ TusLibrosInterface withClientList: self defaultClientList withCatalog: self defaultCatalog.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:25:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:25:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:25:43'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:25:43'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 11/28/2020 15:25:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 11/28/2020 15:25:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 11/28/2020 15:25:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 11/28/2020 15:25:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 11/28/2020 15:25:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 11/28/2020 15:25:50'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 11/28/2020 15:25:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 11/28/2020 15:25:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 11/28/2020 15:25:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 11/28/2020 15:25:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 11/28/2020 15:25:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 11/28/2020 15:25:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 11/28/2020 15:25:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 11/28/2020 15:25:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:26:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:26:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:26:08'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:26:08'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:26:34'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:26:34'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:27:10' prior: 50868749!
test03CreatesANewCart

	| tusLibrosInterface validClientId validPassword newCartId |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	validClientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
	newCartId := tusLibrosInterface createCartFor: validClientId withPassword: validPassword.
	
	self assert: (tusLibrosInterface listCart: newCartId ) isEmpty.
	! !

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:27:13'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:27:13'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:27:22'!
listCart: aTusLibrosInterface 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:29:21' prior: 50868950!
listCart: aCartId 
	
	^OrderedCollection new.! !

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:29:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:29:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:29:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:29:24'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:36:54'!
test04CanNotAddItemToAnInvalidCartId

	| tusLibrosInterface invalidCartId validBookISBN validQuantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidCartId := testObjectsFactory invalidCartId.
	validBookISBN := testObjectsFactory validBookISBN.
	validQuantity := 1.
	
	self should: [ tusLibrosInterface addToCart: invalidCartId book: validBookISBN withAmount: validQuantity.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:37:58' prior: 50868975!
test04CanNotAddItemToAnInvalidCartId

	| tusLibrosInterface invalidCartId validBookISBN validQuantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidCartId := testObjectsFactory invalidCartId.
	validBookISBN := testObjectsFactory validBookISBN.
	validQuantity := 1.
	
	self should: [ tusLibrosInterface add: validQuantity of: validBookISBN  toCart: invalidCartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:38:08'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:38:08'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:38:15'!
invalidCartId
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:38:56' prior: 50869021!
invalidCartId
	^ 9.! !

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:38:58'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:39:27' prior: 50868995!
test04CanNotAddItemToAnInvalidCartId

	| tusLibrosInterface invalidCartId validBookISBN validQuantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidCartId := testObjectsFactory invalidCartId.
	validBookISBN := testObjectsFactory itemSellByTheStore.
	validQuantity := 1.
	
	self should: [ tusLibrosInterface add: validQuantity of: validBookISBN  toCart: invalidCartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidCartIdErrorDescription.
	! !

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:39:30'!
ERROR!
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:39:36'!
invalidCartIdErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:39:48' prior: 50869057!
invalidCartIdErrorDescription
	^ 'Invalid Cart Id'.! !

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:39:49'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:39:55'!
add: aSmallInteger of: aString toCart: aSmallInteger3 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:40:36' prior: 50869071!
add: aQuantity of: anItem toCart: aCartId
	
	
	self error: self class invalidCartIdErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:40:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:40:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:40:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:40:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:40:38'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:41:40'!
test05CanNotAddInvalidItemToCart

	| tusLibrosInterface invalidCartId validBookISBN validQuantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidCartId := testObjectsFactory validCartId.
	validBookISBN := testObjectsFactory itemNotSellByTheStore.
	validQuantity := 1.
	
	self should: [ tusLibrosInterface add: validQuantity of: validBookISBN  toCart: invalidCartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemErrorDescription.
	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:42:10'!
validCartId
	^ 2.! !

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:42:18'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:42:18'!
ERROR!
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:42:25'!
invalidItemErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:42:34' prior: 50869131!
invalidItemErrorDescription
	
	^ 'Invalid Item'.! !

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:42:35'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 11/28/2020 15:44:25'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog cartIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:44:22' prior: 50869077!
add: aQuantity of: anItem toCart: aCartId
	
	
	(cartIds includes: aCartId ) ifFalse: [self error: self class invalidCartIdErrorDescription.].
	
	self error: self class invalidItemErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:44:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:44:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:44:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:44:28'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:44:28'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:44:41'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:45:08' prior: 50868821!
initializeWithClientList: aClientList withCatalog: aCatalog

	clientList := aClientList.
	catalog := aCatalog.
	cartIds := OrderedCollection new.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:45:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:45:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:45:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:45:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:45:13'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:45:13'!
FAILURE!

----End fileIn of /home/franco/Documents/smallTalk/linux64/Packages/TerseGuide.pck.st----!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:49:50' prior: 50868772!
createCartFor: aClientId withPassword: aPassword
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	cartIds add: (cartIds max + 1).
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:49:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:49:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:49:52'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:49:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:49:52'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:49:55'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:51:29' prior: 50872151!
createCartFor: aClientId withPassword: aPassword
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	cartIds add: 1.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:51:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:51:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:51:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:51:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:51:32'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:51:32'!
FAILURE!

!methodRemoval: StoreTestObjectsFactory #validCartId stamp: 'FD 11/28/2020 15:53:07'!
validCartId
	^ 2.!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:55:09' prior: 50869101!
test05CanNotAddInvalidItemToCart

	| tusLibrosInterface validCartId validBookISBN validQuantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	validBookISBN := testObjectsFactory itemNotSellByTheStore.
	validQuantity := 1.
	
	validCartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface add: validQuantity of: validBookISBN  toCart: validCartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemErrorDescription.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:55:14' prior: 50872222!
test05CanNotAddInvalidItemToCart

	| tusLibrosInterface cartId validBookISBN validQuantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	validBookISBN := testObjectsFactory itemNotSellByTheStore.
	validQuantity := 1.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface add: validQuantity of: validBookISBN  toCart: cartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemErrorDescription.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:55:31' prior: 50872244!
test05CanNotAddInvalidItemToCart

	| tusLibrosInterface cartId invalidBookISBN validQuantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidBookISBN := testObjectsFactory itemNotSellByTheStore.
	validQuantity := 1.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface add: validQuantity of: invalidBookISBN  toCart: cartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemErrorDescription.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:55:38' prior: 50872266!
test05CanNotAddInvalidItemToCart

	| tusLibrosInterface cartId invalidBookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidBookISBN := testObjectsFactory itemNotSellByTheStore.
	quantity := 1.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface add: quantity of: invalidBookISBN  toCart: cartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemErrorDescription.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:55:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:55:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:55:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:55:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:55:43'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:55:43'!
FAILURE!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:56:51' prior: 50872185!
createCartFor: aClientId withPassword: aPassword
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	^cartIds add: 1.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 15:56:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 15:56:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 15:56:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 15:56:52'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 15:56:52'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:57:45'!
test05CanNotAddInvalidItemQuantityToCart

	| tusLibrosInterface cartId invalidBookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidBookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 0.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface add: quantity of: invalidBookISBN  toCart: cartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemQuantityErrorDescription.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:57:54' prior: 50872361!
test05CanNotAddInvalidItemQuantityToCart

	| tusLibrosInterface cartId bookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	bookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 0.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface add: quantity of: bookISBN  toCart: cartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemQuantityErrorDescription.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:58:07'!
test06CanNotAddInvalidItemQuantityToCart

	| tusLibrosInterface cartId bookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	bookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 0.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface add: quantity of: bookISBN  toCart: cartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemQuantityErrorDescription.
	! !

!methodRemoval: TusLibrosInterfaceTest #test05CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 15:58:07'!
test05CanNotAddInvalidItemQuantityToCart

	| tusLibrosInterface cartId bookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	bookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 0.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface add: quantity of: bookISBN  toCart: cartId.]
	 raise:  Error - MessageNotUnderstood
	withMessageText: TusLibrosInterface invalidItemQuantityErrorDescription.
	!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 15:58:09'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 15:58:09'!
ERROR!
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:58:13'!
invalidItemQuantityErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:58:24' prior: 50872453!
invalidItemQuantityErrorDescription
	^ 'Invalid item quantity'! !

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 15:58:26'!
FAILURE!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:00:38' prior: 50869154!
add: aQuantity of: anItem toCart: aCartId
	
	
	(cartIds includes: aCartId ) ifFalse: [self error: self class invalidCartIdErrorDescription.].
	
	(cartIds at: aCartId) add: aQuantity of: anItem.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:04:05' prior: 50872331!
createCartFor: aClientId withPassword: aPassword
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	^cartIds at: 1 put: nil.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:05:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:05:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:05:35'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:05:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:05:35'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:05:35'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:05:39'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:06:39' prior: 50872478!
createCartFor: aClientId withPassword: aPassword
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	^cartIds at: 1 put: (Cart acceptingItemsOf: catalog).
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:06:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:06:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:06:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:06:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:06:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:06:41'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:06:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:07:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:07:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:07:26'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:07:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:07:27'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:07:27'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:07:28'!
ERROR!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:08:53' prior: 50869185!
initializeWithClientList: aClientList withCatalog: aCatalog

	clientList := aClientList.
	catalog := aCatalog.
	cartIds := Dictionary new.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:08:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:08:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:08:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:08:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:08:55'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:08:55'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:08:59'!
FAILURE!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:10:58' prior: 50872515!
createCartFor: aClientId withPassword: aPassword
	
	| newCartId |
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	newCartId := 1.
	
	cartIds at: newCartId put: (Cart acceptingItemsOf: catalog).
	
	^newCartId.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:10:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:10:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:10:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:10:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:10:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:10:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:11:03'!
FAILURE!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:12:46' prior: 50872468!
add: aQuantity of: anItem toCart: aCartId
	
	
	(cartIds includesKey: aCartId ) ifFalse: [self error: self class invalidCartIdErrorDescription.].
	
	(cartIds at: aCartId) add: aQuantity of: anItem.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:12:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:12:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:12:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:12:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:12:48'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:12:48'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:12:50'!
FAILURE!
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:13:24' prior: 50869137!
invalidItemErrorDescription
	
	^ Cart itemNotSellByTheStore.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 15:42:34' prior: 50872687!
invalidItemErrorDescription
	
	^ 'Invalid Item'.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:22:04' prior: 50872652!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	(cartIds includesKey: aCartId ) ifFalse: [self error: self class invalidCartIdErrorDescription.].
	
	cart := cartIds at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | 
		(error = cart) ifTrue: [self error: self class invalidItemErrorDescription].
		(error = cart) ifTrue: [self error: self class invalidItemQuantityErrorDescription].
		self error: error.
	].
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:22:31' prior: 50872698!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	(cartIds includesKey: aCartId ) ifFalse: [self error: self class invalidCartIdErrorDescription.].
	
	cart := cartIds at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | 
		(error = cart invalidItemErrorMessage) ifTrue: [self error: self class invalidItemErrorDescription].
		(error = cart invalidQuantityErrorMessage) ifTrue: [self error: self class invalidItemQuantityErrorDescription].
		self error: error.
	].
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:22:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:22:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:22:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:22:33'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:22:33'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:22:33'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:22:36'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:23:29'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:24:01'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:24:13'!
PASSED!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:25:35' prior: 50872716!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	(cartIds includesKey: aCartId ) ifFalse: [self error: self class invalidCartIdErrorDescription.].
	
	cart := cartIds at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | 
		(error messageText = cart invalidItemErrorMessage) ifTrue: [self error: self class invalidItemErrorDescription].
		(error messageText = cart invalidQuantityErrorMessage) ifTrue: [self error: self class invalidItemQuantityErrorDescription].
		self error: error.
	].
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:25:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:25:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:25:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:25:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:25:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:25:36'!
PASSED!

!methodRemoval: TusLibrosInterface #initializeWithClientList: stamp: 'FD 11/28/2020 16:25:51'!
initializeWithClientList: aClientList

	clientList := aClientList.!

!methodRemoval: TusLibrosInterface class #withClientList: stamp: 'FD 11/28/2020 16:26:01'!
withClientList: aClientList

	^self new initializeWithClientList: aClientList.!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:26:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:26:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:26:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:26:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:26:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:26:03'!
PASSED!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 11/28/2020 16:26:44'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog cartList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:26:44' prior: 50872578!
initializeWithClientList: aClientList withCatalog: aCatalog

	clientList := aClientList.
	catalog := aCatalog.
	cartList := Dictionary new.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:26:44' prior: 50872611!
createCartFor: aClientId withPassword: aPassword
	
	| newCartId |
	
	(clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.].
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	newCartId := 1.
	
	cartList at: newCartId put: (Cart acceptingItemsOf: catalog).
	
	^newCartId.
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:26:44' prior: 50872771!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	(cartList includesKey: aCartId ) ifFalse: [self error: self class invalidCartIdErrorDescription.].
	
	cart := cartList at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | 
		(error messageText = cart invalidItemErrorMessage) ifTrue: [self error: self class invalidItemErrorDescription].
		(error messageText = cart invalidQuantityErrorMessage) ifTrue: [self error: self class invalidItemQuantityErrorDescription].
		self error: error.
	].
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:27:23'!
assertValidClientId: aClientId

	^ (clientList includes: aClientId) ifFalse: [self error: self class invalidClientIdErrorDescription.]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:27:23' prior: 50872860!
createCartFor: aClientId withPassword: aPassword
	
	| newCartId |
	
	self assertValidClientId: aClientId.
	
	((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].
	
	newCartId := 1.
	
	cartList at: newCartId put: (Cart acceptingItemsOf: catalog).
	
	^newCartId.
	! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:28:31'!
signalInvalidClient

	^ [self error: self class invalidClientIdErrorDescription.]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:28:31' prior: 50872896!
assertValidClientId: aClientId

	^ (clientList includes: aClientId) ifFalse: self signalInvalidClient! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:28:42'!
signalInvalidClientId

	^ [self error: self class invalidClientIdErrorDescription.]! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:28:42' prior: 50872923!
assertValidClientId: aClientId

	^ (clientList includes: aClientId) ifFalse: self signalInvalidClientId! !

!methodRemoval: TusLibrosInterface #signalInvalidClient stamp: 'FD 11/28/2020 16:28:42'!
signalInvalidClient

	^ [self error: self class invalidClientIdErrorDescription.]!
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 16:31:21'!
assertValidPassword: aPassword forClient: aClientId

	^ ((clientList at: aClientId) = aPassword ) ifFalse: [self error: self class invalidPasswordErrorDescription].! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 16:31:33'!
signalInvalidPassword

	^ [self error: self class invalidPasswordErrorDescription]! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 16:31:33' prior: 50872947!
assertValidPassword: aPassword forClient: aClientId

	^ ((clientList at: aClientId) = aPassword ) ifFalse: self signalInvalidPassword.! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:31:55' prior: 50872904!
createCartFor: aClientId withPassword: aPassword
	
	| newCartId |
	
	self assertValidClientId: aClientId.
	
	self assertValidPassword: aPassword forClient: aClientId.
	
	newCartId := 1.
	
	cartList at: newCartId put: (Cart acceptingItemsOf: catalog).
	
	^newCartId.
	! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 16:32:58' prior: 50872961!
assertValidPassword: aPassword forClient: aClientId

	self assertValidClientId: aClientId.
	
	((clientList at: aClientId) = aPassword ) ifFalse: self signalInvalidPassword.! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:33:55' prior: 50872969!
createCartFor: aClientId withPassword: aPassword
	
	| newCartId |
	
	self assertValidPassword: aPassword forClient: aClientId.
	
	newCartId := 1.
	
	cartList at: newCartId put: (Cart acceptingItemsOf: catalog).
	
	^newCartId.
	! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 16:36:36'!
assertValidCartId: aCartId

	(cartList includesKey: aCartId ) ifFalse: [self error: self class invalidCartIdErrorDescription.]! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:38:20' prior: 50872876!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | 
		(error messageText = cart invalidItemErrorMessage) ifTrue: [self error: self class invalidItemErrorDescription].
		(error messageText = cart invalidQuantityErrorMessage) ifTrue: [self error: self class invalidItemQuantityErrorDescription].
		self error: error.
	].
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:41:05'!
test07AddsItemsToCart

	| tusLibrosInterface cartId bookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	bookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 2.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	tusLibrosInterface add: quantity of: bookISBN  toCart: cartId.
	
	self assert: ((tusLibrosInterface listCart: cartId ) ocurrencesOf: bookISBN)  = quantity.! !

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 16:41:09'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 16:41:09'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:41:34' prior: 50873025!
test07AddsItemsToCart

	| tusLibrosInterface cartId bookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	bookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 2.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	tusLibrosInterface add: quantity of: bookISBN  toCart: cartId.
	
	self assert: ((tusLibrosInterface listCart: cartId ) occurrencesOf: bookISBN)  = quantity.! !

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 16:41:39'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 16:41:39'!
FAILURE!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:42:33' prior: 50868956!
listCart: aCartId 
	
	cartList at: aCartId.! !
!Cart methodsFor: 'queries' stamp: 'FD 11/28/2020 16:44:13'!
list

	^items.! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:44:33' prior: 50873076!
listCart: aCartId 
	
	^(cartList at: aCartId) list.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:44:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:44:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:44:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:44:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:44:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:44:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 16:44:35'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:53:19'!
test08OnlyAddsItemsToSpecifiedCart

	| tusLibrosInterface firstCartId secondCartId bookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	bookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 2.
	
	firstCartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	secondCartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	tusLibrosInterface add: quantity of: bookISBN  toCart: firstCartId.
	
	self assert: ((tusLibrosInterface listCart: firstCartId ) occurrencesOf: bookISBN)  = quantity.
	self assert: (tusLibrosInterface listCart: secondCartId) isEmpty.! !

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 16:53:21'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 16:53:21'!
FAILURE!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:55:57' prior: 50872990!
createCartFor: aClientId withPassword: aPassword
	
	| newCartId |
	
	self assertValidPassword: aPassword forClient: aClientId.
	
	newCartId := self getNewCartId.
	
	cartList at: newCartId put: (Cart acceptingItemsOf: catalog).
	
	^newCartId.
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:56:33'!
getNewCartId

	cartList ifEmpty: [^1].
	^cartList max + 1.
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:56:48' prior: 50873159!
getNewCartId

	cartList ifEmpty: [^1].
	^cartList keys max + 1.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:57:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:57:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:57:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:57:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:57:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:57:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 16:57:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 16:57:11'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:57:59'!
test09CanNotListAnInvalidCartId

	| tusLibrosInterface firstCartId secondCartId bookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	bookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 2.
	
	firstCartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	secondCartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	tusLibrosInterface add: quantity of: bookISBN  toCart: firstCartId.
	
	self assert: ((tusLibrosInterface listCart: firstCartId ) occurrencesOf: bookISBN)  = quantity.
	self assert: (tusLibrosInterface listCart: secondCartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:58:06' prior: 50873197!
test09CanNotListAnInvalidCartId

	| tusLibrosInterface cartId secondCartId bookISBN quantity |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	bookISBN := testObjectsFactory itemSellByTheStore .
	quantity := 2.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	secondCartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	tusLibrosInterface add: quantity of: bookISBN  toCart: cartId.
	
	self assert: ((tusLibrosInterface listCart: cartId ) occurrencesOf: bookISBN)  = quantity.
	self assert: (tusLibrosInterface listCart: secondCartId) isEmpty.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 16:59:26' prior: 50873224!
test09CanNotListAnInvalidCartId

	| tusLibrosInterface cartId |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := testObjectsFactory invalidCartId.

	self should: [tusLibrosInterface listCart: cartId]
	raise:  Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidCartIdErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:59:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:59:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:59:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:59:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:59:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:59:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 16:59:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 16:59:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 16:59:28'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 16:59:28'!
FAILURE!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 16:59:52' prior: 50873084!
listCart: aCartId 
	
	self assertValidCartId: aCartId.
	^(cartList at: aCartId) list.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 16:59:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 16:59:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 16:59:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 16:59:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 16:59:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 16:59:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 16:59:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 16:59:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 16:59:59'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:02:33'!
test10CanNotCheckoutAnInvalidCartId

	| tusLibrosInterface cartId creditCard |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := testObjectsFactory invalidCartId.
	creditCard := testObjectsFactory notExpiredCreditCard.

	self should: [tusLibrosInterface checkout: cartId with: creditCard]
	raise:  Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidCartIdErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:02:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:02:36'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:02:36'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:02:43'!
checkout: aSmallInteger with: aCreditCard 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:03:27' prior: 50873393!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.! !

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:03:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:03:30'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:08:51'!
test11CanNotCheckoutWithAnExpiredCreditCard

	| tusLibrosInterface cartId creditCard |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := testObjectsFactory invalidCartId.
	creditCard := testObjectsFactory expiredCreditCard.

	self should: [tusLibrosInterface checkout: cartId with: creditCard]
	raise:  Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface expiredCreditCardErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:08:55'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:08:55'!
ERROR!
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:09:25'!
expiredCreditCardErrorDescription
	self shouldBeImplemented.! !
!TusLibrosInterface class methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:09:37' prior: 50873437!
expiredCreditCardErrorDescription
	^ 'Credit card has expired'.! !

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:09:39'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:10:02' prior: 50873412!
test11CanNotCheckoutWithAnExpiredCreditCard

	| tusLibrosInterface cartId creditCard |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	creditCard := testObjectsFactory expiredCreditCard.

	self should: [tusLibrosInterface checkout: cartId with: creditCard]
	raise:  Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface expiredCreditCardErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:10:05'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:10:05'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:11:37'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:11:37'!
FAILURE!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 11/28/2020 17:14:15'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog cartList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 11/28/2020 17:14:18'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog cartList merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:14:12' prior: 50873399!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: Date today  registeringOn: salesBook.
	! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FD 11/28/2020 17:16:03'!
initializeWithClientList: aClientList withCatalog: aCatalog withProcessor: aMerchantProcessor

	clientList := aClientList.
	catalog := aCatalog.
	cartList := Dictionary new.
	merchantProcessor := aMerchantProcessor.
	salesBook := OrderedCollection new.! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FD 11/28/2020 17:16:19'!
initializeWithClientList: aClientList withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor

	clientList := aClientList.
	catalog := aCatalog.
	cartList := Dictionary new.
	merchantProcessor := aMerchantProcessor.
	salesBook := OrderedCollection new.! !

!methodRemoval: TusLibrosInterface #initializeWithClientList:withCatalog:withProcessor: stamp: 'FD 11/28/2020 17:16:19'!
initializeWithClientList: aClientList withCatalog: aCatalog withProcessor: aMerchantProcessor

	clientList := aClientList.
	catalog := aCatalog.
	cartList := Dictionary new.
	merchantProcessor := aMerchantProcessor.
	salesBook := OrderedCollection new.!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:17:19' prior: 50873505!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook.
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:18:23' prior: 50873549!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	(Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook) checkout.
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:18:42' prior: 50873559!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	(Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook) checkOut.
	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:19:58' prior: 50868836!
createTusLibrosInterface

	^ TusLibrosInterface withClientList: self defaultClientList withCatalog: self defaultCatalog withMerchantProcessor: CashierTest new.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:20:05'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 11/28/2020 17:20:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:20:10'!
ERROR!
!TusLibrosInterface class methodsFor: 'initialization' stamp: 'FD 11/28/2020 17:20:46'!
withClientList: aClientList withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor

	^self new initializeWithClientList: aClientList withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor .! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:20:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:20:48'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:20:48'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:21:46' prior: 50873453!
test11CanNotCheckoutWithAnExpiredCreditCard

	| tusLibrosInterface cartId creditCard |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory expiredCreditCard.

	self should: [tusLibrosInterface checkout: cartId with: creditCard]
	raise:  Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface expiredCreditCardErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:21:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:21:48'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:21:48'!
FAILURE!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:23:42' prior: 50873570!
checkout: aCartId with: aCreditCard 
	
	| cashier |
	
	self assertValidCartId: aCartId.
	
	
		[
			cashier := Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook.
			cashier checkOut.
			]
	on: Error
	do: [ :error | 
		(error messageText = cashier) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
		self error: error.
	].
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:24:13' prior: 50873795!
checkout: aCartId with: aCreditCard 
	
	| cashier |
	
	self assertValidCartId: aCartId.
	
	
		[
			cashier := Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook.
			cashier checkOut.
			]
	on: Error
	do: [ :error | 
		(error messageText = cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
		self error: error.
	].
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:24:15'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:24:51' prior: 50873812!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	
		[
			(Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook) checkOut.
			]
	on: Error
	do: [ :error | 
		(error messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
		self error: error.
	].
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:24:54'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:24:54'!
PASSED!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:25:15' prior: 50873873!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	
	[(Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook) checkOut.]
	on: Error
	do: [ :error | 
		(error messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: [self error: self class expiredCreditCardErrorDescription ].
		self error: error.
	].
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:27:47'!
test12CheckoutRegistersASale

	| tusLibrosInterface cartId creditCard |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory notExpiredCreditCard.

	tusLibrosInterface checkout: cartId with: creditCard.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:28:56' prior: 50873946!
test12CheckoutRegistersASale

	| tusLibrosInterface cartId creditCard |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory validClientId withPassword: testObjectsFactory validPassword.
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory notExpiredCreditCard.

	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: testObjectsFactory salesBook size = 1.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:31:14' prior: 50873965!
test12CheckoutRegistersASale

	| tusLibrosInterface clientId password cartId creditCard |
	
	
	clientId := testObjectsFactory validClientId.
	password := testObjectsFactory validPassword.
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: clientId withPassword: password .
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory notExpiredCreditCard.

	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: password) size = 1.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:31:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:31:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:31:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:31:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:31:59'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:31:59'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:31:59'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:32:58' prior: 50873985!
test12CheckoutRegistersASale

	| tusLibrosInterface clientId password cartId creditCard |
	
	
	clientId := testObjectsFactory validClientId.
	password := testObjectsFactory validPassword.
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: clientId withPassword: password.
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory notExpiredCreditCard.

	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: password)  = 1.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:33:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:33:00'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:33:00'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:33:00'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:33:07' prior: 50874067!
test12CheckoutRegistersASale

	| tusLibrosInterface clientId password cartId creditCard |
	
	
	clientId := testObjectsFactory validClientId.
	password := testObjectsFactory validPassword.
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: clientId withPassword: password.
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory notExpiredCreditCard.

	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: password) size = 1.! !

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:33:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:33:54'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:33:54'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:35:17'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:35:17'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:36:06'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:36:54' prior: 50868422 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'FD 11/28/2020 17:39:51'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:39:50'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

!methodRemoval: TusLibrosInterfaceTest #debit:from: stamp: 'FD 11/28/2020 17:40:06'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:40:11' prior: 50874186 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'FD 11/28/2020 17:40:19'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'FD 11/28/2020 17:40:37' prior: 50868313 overrides: 16896425!
initialize

	today := DateAndTime now.
	debitBehavior := [ :anAmount :aCreditCard | ].! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:40:54' prior: 50873581!
createTusLibrosInterface

	^ TusLibrosInterface withClientList: self defaultClientList withCatalog: self defaultCatalog withMerchantProcessor: self.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:40:57'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 11/28/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:40:57'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:41:07'!
listPurchasesFor: aSmallInteger withPassword: aSmallInteger2 
	self shouldBeImplemented.! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:41:42' prior: 50874338!
listPurchasesFor: aClientId withPassword: aPassword

	^salesBook copy.
	! !

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:41:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:41:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:41:45'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:42:34'!
test13CanNotListPurchasesWithAnInvalidClientIdOrPassword

	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:44:14'!
test13CanNotListPurchasesWithAnInvalidClientId

		| tusLibrosInterface invalidClientId password |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidClientId := testObjectsFactory validClientId.
	password := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: invalidClientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !

!methodRemoval: TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientIdOrPassword stamp: 'FD 11/28/2020 17:44:18'!
test13CanNotListPurchasesWithAnInvalidClientIdOrPassword

	!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:44:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:44:32'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:44:32'!
FAILURE!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:44:50' prior: 50874344!
listPurchasesFor: aClientId withPassword: aPassword

	self assertValidClientId: aClientId.
	^salesBook copy.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:44:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:44:51'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:44:51'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:45:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:45:56'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:45:56'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:46:17'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:46:49'!
FAILURE!
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 17:48:32' prior: 50872935!
assertValidClientId: aClientId

		| isIncluded |
		
		isIncluded  := clientList includes: aClientId.
		(clientList includes: aClientId) ifFalse: self signalInvalidClientId! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:48:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:48:36'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:48:36'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:49:28' prior: 50874400!
test13CanNotListPurchasesWithAnInvalidClientId

		| tusLibrosInterface invalidClientId password |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidClientId := testObjectsFactory invalidClientId.
	password := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: invalidClientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:49:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:49:30'!
PASSED!
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 16:28:42' prior: 50874588!
assertValidClientId: aClientId

	^ (clientList includes: aClientId) ifFalse: self signalInvalidClientId! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:50:17'!
test13CanNotListPurchasesWithAnInvalidPassword

		| tusLibrosInterface invalidClientId password |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidClientId := testObjectsFactory invalidClientId.
	password := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: invalidClientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:50:25' prior: 50874718!
test13CanNotListPurchasesWithAnInvalidPassword

		| tusLibrosInterface clientId password |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory invalidClientId.
	password := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: clientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:50:46' prior: 50874737!
test13CanNotListPurchasesWithAnInvalidPassword

		| tusLibrosInterface clientId invalidPassword |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	invalidPassword := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: clientId withPassword: invalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidPasswordErrorDescription .! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:50:55'!
test14CanNotListPurchasesWithAnInvalidPassword

		| tusLibrosInterface clientId invalidPassword |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	invalidPassword := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: clientId withPassword: invalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidPasswordErrorDescription .! !

!methodRemoval: TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:50:55'!
test13CanNotListPurchasesWithAnInvalidPassword

		| tusLibrosInterface clientId invalidPassword |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	invalidPassword := testObjectsFactory invalidPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: clientId withPassword: invalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidPasswordErrorDescription .!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'FD 11/28/2020 17:50:59' prior: 50874647!
test13CanNotListPurchasesWithAnInvalidClientId

		| tusLibrosInterface invalidClientId password |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	invalidClientId := testObjectsFactory invalidClientId.
	password := testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: invalidClientId withPassword: password  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidClientIdErrorDescription.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:51:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:51:09'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:51:09'!
FAILURE!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:51:24' prior: 50874474!
listPurchasesFor: aClientId withPassword: aPassword

	self assertValidPassword:  aPassword forClient: aClientId.
	^salesBook copy.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:51:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:51:26'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'tus libros interface' stamp: 'FD 11/28/2020 17:52:54' prior: 50869026!
invalidCartId
	^ -9.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 11/28/2020 17:52:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:52:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:53:01'!
PASSED!

!methodRemoval: TusLibrosInterface class #withClientList:withCatalog: stamp: 'FD 11/28/2020 17:53:33'!
withClientList: aClientList withCatalog: aCatalog

	^self new initializeWithClientList: aClientList withCatalog: aCatalog.!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:53:43'!
PASSED!

!methodRemoval: TusLibrosInterface #initializeWithClientList:withCatalog: stamp: 'FD 11/28/2020 17:54:27'!
initializeWithClientList: aClientList withCatalog: aCatalog

	clientList := aClientList.
	catalog := aCatalog.
	cartList := Dictionary new.!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:54:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:54:28'!
PASSED!
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 17:54:56'!
signalInvalidCartId

	^ [self error: self class invalidCartIdErrorDescription.]! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 11/28/2020 17:54:56' prior: 50873000!
assertValidCartId: aCartId

	(cartList includesKey: aCartId ) ifFalse: self signalInvalidCartId! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:56:10'!
signalInvalidItem

	^ [self error: self class invalidItemErrorDescription]! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:56:10' prior: 50873007!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | 
		(error messageText = cart invalidItemErrorMessage) ifTrue: self signalInvalidItem.
		(error messageText = cart invalidQuantityErrorMessage) ifTrue: [self error: self class invalidItemQuantityErrorDescription].
		self error: error.
	].
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:56:24'!
signalInvalidItemQuantity

	^ [self error: self class invalidItemQuantityErrorDescription]! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:56:24' prior: 50875318!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | 
		(error messageText = cart invalidItemErrorMessage) ifTrue: self signalInvalidItem.
		(error messageText = cart invalidQuantityErrorMessage) ifTrue: self signalInvalidItemQuantity.
		self error: error.
	].
	! !
!TusLibrosInterface methodsFor: 'error handling' stamp: 'FD 11/28/2020 17:58:24'!
handleError: anError forCart: aCart

		(anError messageText = aCart invalidItemErrorMessage) ifTrue: self signalInvalidItem.
		(anError messageText = aCart invalidQuantityErrorMessage) ifTrue: self signalInvalidItemQuantity.
		self error: anError.
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:58:44' prior: 50875340!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | 
		self handleError: error forCart: cart
	].
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 17:58:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 17:58:45'!
PASSED!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 17:59:02' prior: 50875367!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	[cart add: aQuantity of: anItem.]
	on: Error
	do: [ :error | self handleError: error forCart: cart ].
	! !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 11/28/2020 18:01:36'!
handleAction: anAction forCart: aCart

	[anAction value]
	on: Error
	do: [ :error | self handleError: error forCart: aCart ].! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:02:06' prior: 50875428!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	self handleAction: [cart add: aQuantity of: anItem.] forCart: cart.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:02:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:02:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:02:15'!
PASSED!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:03:24' prior: 50875445!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	self handleAction: [cart add: aQuantity of: anItem.] forCart: cart.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:03:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:03:26'!
PASSED!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:04:37'!
signalExpiredCreditCard

	^ [self error: self class expiredCreditCardErrorDescription ]! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:04:37' prior: 50873929!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	
	[(Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook) checkOut.]
	on: Error
	do: [ :error | 
		(error messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: self signalExpiredCreditCard.
		self error: error.
	].
	! !
!TusLibrosInterface methodsFor: 'error handling' stamp: 'FD 11/28/2020 18:05:40'!
handleCashierError: anError

		
		(anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: self signalExpiredCreditCard.
		self error: anError.
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:05:58' prior: 50875619!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	
	[(Cashier toCheckout: (cartList at: aCartId) charging: aCreditCard throught: merchantProcessor  on: DateAndTime today  registeringOn: salesBook) checkOut.]
	on: Error
	do: [ :error | self handleCashierError: error].
	! !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 11/28/2020 18:06:41'!
handleCashierAction: anAction
	
	[anAction value]
	on: Error
	do: [ :error | self handleCashierError: error].! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:07:39' prior: 50875644!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	
	self handleCashierAction: [(
		Cashier toCheckout: (cartList at: aCartId)
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: salesBook) checkOut.].
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:07:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:07:40'!
PASSED!
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 11/28/2020 18:08:38'!
handleAction: anAction onError: errorHandler
	
	[anAction value]
	on: Error
	do: errorHandler.! !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 11/28/2020 18:09:07' prior: 50875438!
handleAction: anAction forCart: aCart

	self handleAction: anAction onError: [ :error | self handleError: error forCart: aCart ]! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:09:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:09:10'!
PASSED!
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 11/28/2020 18:09:37' prior: 50875657!
handleCashierAction: anAction
	
	self handleAction: anAction onError: [ :error | self handleCashierError: error].! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:09:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:09:38'!
PASSED!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:11:06' prior: 50875554!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	self handleAction: [cart add: aQuantity of: anItem.] onError: [ :error | self handleError: error forCart: cart ]! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:11:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:11:09'!
PASSED!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:12:02' prior: 50875848!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	self handleAction: [cart add: aQuantity of: anItem.]
	      onError: [ :error | self handleError: error forCart: cart ]! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:13:01' prior: 50875664!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	self handleAction: [(
		Cashier toCheckout: (cartList at: aCartId)
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: salesBook) checkOut.
		]
	      onError: [ :error | self handleCashierError: error]! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:13:02'!
PASSED!

!methodRemoval: TusLibrosInterface #handleAction:forCart: stamp: 'FD 11/28/2020 18:13:06'!
handleAction: anAction forCart: aCart

	self handleAction: anAction onError: [ :error | self handleError: error forCart: aCart ]!

!methodRemoval: TusLibrosInterface #handleCashierAction: stamp: 'FD 11/28/2020 18:13:07'!
handleCashierAction: anAction
	
	self handleAction: anAction onError: [ :error | self handleCashierError: error].!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:13:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:13:11'!
PASSED!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:13:58' prior: 50875909!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |
	
	self assertValidCartId: aCartId.
	
	cart := cartList at: aCartId.
	
	self handleAction: [cart add: aQuantity of: anItem.]
	      onError: (self handleErrorforCart: cart).! !
!TusLibrosInterface methodsFor: 'error handling' stamp: 'FD 11/28/2020 18:14:37'!
handleErrorforCart: aCart

		^[:anError | (anError messageText = aCart invalidItemErrorMessage) ifTrue: self signalInvalidItem.
		(anError messageText = aCart invalidQuantityErrorMessage) ifTrue: self signalInvalidItemQuantity.
		self error: anError.]
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:14:38'!
PASSED!

!methodRemoval: TusLibrosInterface #handleError:forCart: stamp: 'FD 11/28/2020 18:14:43'!
handleError: anError forCart: aCart

		(anError messageText = aCart invalidItemErrorMessage) ifTrue: self signalInvalidItem.
		(anError messageText = aCart invalidQuantityErrorMessage) ifTrue: self signalInvalidItemQuantity.
		self error: anError.
	!
!TusLibrosInterface methodsFor: 'error handling' stamp: 'FD 11/28/2020 18:15:10' prior: 50876056!
handleErrorforCart: aCart

		^[:anError | 
			(anError messageText = aCart invalidItemErrorMessage) ifTrue: self signalInvalidItem.
			(anError messageText = aCart invalidQuantityErrorMessage) ifTrue: self signalInvalidItemQuantity.
			self error: anError.
		]
	! !
!TusLibrosInterface methodsFor: 'error handling' stamp: 'FD 11/28/2020 18:15:44'!
handleCashierError

		
		^[ :anError | 
			(anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: self signalExpiredCreditCard.
			self error: anError.
		].
	! !

!methodRemoval: TusLibrosInterface #handleCashierError: stamp: 'FD 11/28/2020 18:15:48'!
handleCashierError: anError

		
		(anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: self signalExpiredCreditCard.
		self error: anError.
	!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:16:01' prior: 50875920!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	self handleAction: [(
		Cashier toCheckout: (cartList at: aCartId)
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: salesBook) checkOut.
		]
	      onError: self handleCashierError.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:16:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:16:03'!
PASSED!
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 11/28/2020 18:22:16'!
handleCheckoutCart: aCart withCreditCard: aCreditCard
	
		(Cashier toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: salesBook) checkOut.
		! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:22:52' prior: 50876157!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	self handleAction: [self handleCheckoutCart: (cartList at: aCartId ) withCreditCard: aCreditCard ]
	      onError: self handleCashierError.! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:25:48' prior: 50873148!
createCartFor: aClientId withPassword: aPassword
	
	| newCartId |
	
	self assertValidPassword: aPassword forClient: aClientId.
	
	newCartId := self getNewCartId.
	
	cartList at: newCartId put: (Cart acceptingItemsOf: catalog).
	
	^newCartId.
	! !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 11/28/2020 18:26:50'!
createCartAndGetId

	| newCartId |
	
	newCartId := self getNewCartId.
	cartList at: newCartId put: (Cart acceptingItemsOf: catalog).
	^newCartId.
		! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 11/28/2020 18:27:12' prior: 50876240!
createCartFor: aClientId withPassword: aPassword
	
	self assertValidPassword: aPassword forClient: aClientId.
	
	^ self createCartAndGetId.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:30:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:30:12'!
PASSED!
!TusLibrosInterface methodsFor: 'error handling' stamp: 'FD 11/28/2020 18:30:16' prior: 50876139!
handleCashierError

		
		[ :anError | 
			(anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: self signalExpiredCreditCard.
			self error: anError.
		].
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:30:18'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:30:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:30:18'!
FAILURE!
!TusLibrosInterface methodsFor: 'error handling' stamp: 'FD 11/28/2020 18:30:21' prior: 50876317!
handleCashierError

		
		^[ :anError | 
			(anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage) ifTrue: self signalExpiredCreditCard.
			self error: anError.
		].
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 11/28/2020 18:32:32'!
PASSED!

----SNAPSHOT----(28 November 2020 18:34:49) CuisUniversity-4384.image priorSource: 17155564!

----QUIT----(28 November 2020 18:35:02) CuisUniversity-4384.image priorSource: 17433207!

----STARTUP---- (2 December 2020 17:03:38) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4384.image!

!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:09:32'!
test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient

		| tusLibrosInterface clientId invalidPassword |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	invalidPassword := testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: clientId withPassword: invalidPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidPasswordErrorDescription .! !
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:09:40' prior: 50876448!
test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient

		| tusLibrosInterface clientId validPassword |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
	self should: [ tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword  ]
	raise: Error - MessageNotUnderstood 
	withMessageText: TusLibrosInterface invalidPasswordErrorDescription .! !
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:15:36' prior: 50876467!
test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient

		| tusLibrosInterface clientId validPassword |
	
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: (Dictionary new at: 'totalAmount' put: 0)! !

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:15:44'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:15:44'!
FAILURE!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 17:20:09' prior: 50874883!
listPurchasesFor: aClientId withPassword: aPassword

	| purchaseList totalAmount |
	
	self assertValidPassword:  aPassword forClient: aClientId.
	
	totalAmount := salesBook sum: [ :sale | ^sale total ].
	
	purchaseList := Dictionary new.
	
	purchaseList at: 'totalAmount' put: totalAmount.
	! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:20:13'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:20:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:20:13'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 17:20:38' prior: 50876511!
listPurchasesFor: aClientId withPassword: aPassword

	| purchaseList totalAmount |
	
	self assertValidPassword:  aPassword forClient: aClientId.
	
	totalAmount := salesBook sum: [ :sale | ^sale total ].
	
	purchaseList := Dictionary new.
	
	purchaseList at: 'totalAmount' put: totalAmount.
	
	^purchaseList.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:20:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:20:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:20:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:20:43'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:21:14'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:21:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:21:14'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:21:16'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:23:29' prior: 50874139!
test12CheckoutRegistersASale

	| tusLibrosInterface clientId password cartId creditCard |
	
	
	clientId := testObjectsFactory validClientId.
	password := testObjectsFactory validPassword.
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: clientId withPassword: password.
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory notExpiredCreditCard.

	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: password) size = 1.! !

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:23:32'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:23:32'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:24:08'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:24:08'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:24:09'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 17:25:12' prior: 50876577!
listPurchasesFor: aClientId withPassword: aPassword

	| purchaseList totalAmount |
	
	self assertValidPassword:  aPassword forClient: aClientId.
	
	totalAmount := salesBook sum: [ :sale | sale total ].
	
	purchaseList := Dictionary new.
	
	purchaseList at: 'totalAmount' put: totalAmount.
	
	^purchaseList.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:25:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:25:48'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:25:48'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 17:25:58' prior: 50876791!
listPurchasesFor: aClientId withPassword: aPassword

	| purchaseList totalAmount |
	
	self assertValidPassword:  aPassword forClient: aClientId.
	
	totalAmount := salesBook sum: [ :sale | sale total ] ifEmpty: 0.
	
	purchaseList := Dictionary new.
	
	purchaseList at: 'totalAmount' put: totalAmount.
	
	^purchaseList.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:25:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:25:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:25:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:26:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:26:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:26:10'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:27:21' prior: 50876486!
test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient

		| tusLibrosInterface clientId validPassword expectedPurchaseList |
	
	
	expectedPurchaseList := Dictionary new at: 'totalAmount' put: 0.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: expectedPurchaseList ! !

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:27:24'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:27:36' prior: 50876991!
test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient

		| tusLibrosInterface clientId validPassword expectedPurchaseList |
	
	
	expectedPurchaseList := Dictionary new.
	expectedPurchaseList at: 'totalAmount' put: 0.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: expectedPurchaseList ! !

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:27:38'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:28:12'!
test16ListsAllPurchasesForAClient

		| tusLibrosInterface clientId validPassword expectedPurchaseList |
	
	
	expectedPurchaseList := Dictionary new.
	expectedPurchaseList at: 'totalAmount' put: 0.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: expectedPurchaseList ! !
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:30:12' prior: 50877037!
test16ListsAllPurchasesForAClient

		| tusLibrosInterface clientId validPassword expectedPurchaseList cartId creditCard|
	
	
	expectedPurchaseList := Dictionary new.
	expectedPurchaseList at: 'totalAmount' put: 0.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
		
	cartId := tusLibrosInterface createCartFor: clientId withPassword: validPassword.
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: expectedPurchaseList ! !
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:32:29' prior: 50877056!
test16ListsAllPurchasesForAClient

		| tusLibrosInterface clientId validPassword expectedPurchaseList cartId creditCard|
	
	
	expectedPurchaseList := Dictionary new.
	expectedPurchaseList at: 'totalAmount' put: testObjectsFactory itemSellByTheStorePrice.
	expectedPurchaseList  at: testObjectsFactory itemSellByTheStore put: testObjectsFactory itemSellByTheStorePrice.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
		
	cartId := tusLibrosInterface createCartFor: clientId withPassword: validPassword.
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: expectedPurchaseList ! !

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:32:31'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:32:31'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:33:42' prior: 50877084!
test16ListsAllPurchasesForAClient

		| tusLibrosInterface clientId validPassword expectedPurchaseList cartId creditCard|
	
	
	expectedPurchaseList := Dictionary new.
	expectedPurchaseList at: 'totalAmount' put: testObjectsFactory itemSellByTheStorePrice * 2.
	expectedPurchaseList  at: testObjectsFactory itemSellByTheStore put: 2.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
		
	cartId := tusLibrosInterface createCartFor: clientId withPassword: validPassword.
	tusLibrosInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: expectedPurchaseList ! !

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:33:43'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:33:51'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:33:51'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'FD 12/2/2020 17:37:28' prior: 50867967!
createSale

	^ Sale of: total for: cart list
! !
!Sale class methodsFor: 'instance creation' stamp: 'FD 12/2/2020 17:38:15'!
of: aTotal for: aList

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal for: aList.! !
!Sale class methodsFor: 'instance creation' stamp: 'FD 12/2/2020 17:38:25' prior: 50877170!
of: aTotal for: aPurchaseList

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal for: aPurchaseList.! !
!Sale class methodsFor: 'instance creation' stamp: 'FD 12/2/2020 17:38:32' prior: 50877177!
of: aTotal for: aPurchaseList

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal for: aPurchaseList.! !
!Sale class methodsFor: 'instance creation' stamp: 'FD 12/2/2020 17:38:42' prior: 50877185!
of: aTotal for: aPurchaseList

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal for: aPurchaseList.! !

!methodRemoval: Sale class #of: stamp: 'FD 12/2/2020 17:38:49'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!classDefinition: #Sale category: 'TusLibros' stamp: 'FD 12/2/2020 17:39:17'!
Object subclass: #Sale
	instanceVariableNames: 'total purchaseList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'FD 12/2/2020 17:39:15'!
initializeTotal: aTotal for: aPurchaseList

	total := aTotal.
	purchaseList := aPurchaseList.! !

!methodRemoval: Sale #initializeTotal: stamp: 'FD 12/2/2020 17:39:26'!
initializeTotal: aTotal

	total := aTotal !
!Sale methodsFor: 'total' stamp: 'FD 12/2/2020 17:39:42'!
purchaseList
	
	^ purchaseList! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 17:43:59' prior: 50876862!
listPurchasesFor: aClientId withPassword: aPassword

	| purchaseList totalAmount |
	
	self assertValidPassword:  aPassword forClient: aClientId.
	
	totalAmount := salesBook sum: [ :sale | sale total ] ifEmpty: 0.
	
	purchaseList := Dictionary new.
	purchaseList at: 'totalAmount' put: totalAmount.
	
	salesBook do: [ :sale | sale purchaseList do: [ :product | purchaseList at: product put: (sale occurrencesOf: product) ]].
	
	^purchaseList.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:45:07'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:45:07'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:45:07'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:45:13'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 17:45:55' prior: 50877225!
listPurchasesFor: aClientId withPassword: aPassword

	| purchaseList totalAmount |
	
	self assertValidPassword:  aPassword forClient: aClientId.
	
	totalAmount := salesBook sum: [ :sale | sale total ] ifEmpty: 0.
	
	purchaseList := Dictionary new.
	purchaseList at: 'totalAmount' put: totalAmount.
	
	salesBook do: [ :sale | sale purchaseList do: [ :product | purchaseList at: product put: (sale purchaseList occurrencesOf: product) ]].
	
	^purchaseList.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:45:57'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:45:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:45:57'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:46:39' prior: 50876704!
test12CheckoutRegistersASale

	| tusLibrosInterface clientId password cartId creditCard |
	
	
	clientId := testObjectsFactory validClientId.
	password := testObjectsFactory validPassword.
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: clientId withPassword: password.
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory notExpiredCreditCard.

	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: password) size = 2.! !
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:47:26' prior: 50877380!
test12CheckoutRegistersASale

	| tusLibrosInterface clientId password cartId creditCard |
	
	
	clientId := testObjectsFactory validClientId.
	password := testObjectsFactory validPassword.
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	
	cartId := tusLibrosInterface createCartFor: clientId withPassword: password.
	
	tusLibrosInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	
	creditCard := testObjectsFactory notExpiredCreditCard.

	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: ((tusLibrosInterface listPurchasesFor: clientId withPassword: password) includesKey: testObjectsFactory itemSellByTheStore).! !

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:47:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:47:27'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 17:49:57'!
test17ListsPurchasesOnlyListsAClientsPurchases

		| tusLibrosInterface clientId validPassword expectedPurchaseList cartId creditCard|
	
	
	expectedPurchaseList := Dictionary new.
	expectedPurchaseList at: 'totalAmount' put: testObjectsFactory itemSellByTheStorePrice * 2.
	expectedPurchaseList  at: testObjectsFactory itemSellByTheStore put: 2.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
		
	cartId := tusLibrosInterface createCartFor: clientId withPassword: validPassword.
	tusLibrosInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory anotherValidClientId withPassword: validPassword.
	tusLibrosInterface add: 5 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: expectedPurchaseList ! !
!StoreTestObjectsFactory methodsFor: 'tus libros interface' stamp: 'FD 12/2/2020 17:50:16'!
anotherValidClientId

	^90.! !
!StoreTestObjectsFactory methodsFor: 'tus libros interface' stamp: 'FD 12/2/2020 17:50:52' prior: 50868620!
defaultClientList

	^Dictionary new
		at: self validClientId put: self validPassword;
		at: self anotherValidClientId  put: self validPassword;
		yourself ! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 17:50:55'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 17:50:55'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 17:50:55'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 17:51:02'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 17:51:02'!
ERROR!
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 12/2/2020 17:51:30' prior: 50874711!
assertValidClientId: aClientId

	^ (clientList includesKey: aClientId) ifFalse: self signalInvalidClientId! !

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 17:51:31'!
FAILURE!
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FD 12/2/2020 17:53:08' prior: 50873526!
initializeWithClientList: aClientList withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor

	clientList := aClientList.
	catalog := aCatalog.
	cartList := Dictionary new.
	merchantProcessor := aMerchantProcessor.
	salesBook := Dictionary new.! !

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 12/2/2020 17:53:16'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog cartList merchantProcessor salesBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 17:53:16' prior: 50876220!
handleCheckoutCart: aCart withCreditCard: aCreditCard
	
		(Cashier toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: salesBooks) checkOut.
		! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 17:53:16' prior: 50877627!
initializeWithClientList: aClientList withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor

	clientList := aClientList.
	catalog := aCatalog.
	cartList := Dictionary new.
	merchantProcessor := aMerchantProcessor.
	salesBooks := Dictionary new.! !
!TusLibrosInterface methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 17:53:16' prior: 50877302!
listPurchasesFor: aClientId withPassword: aPassword

	| purchaseList totalAmount |
	
	self assertValidPassword:  aPassword forClient: aClientId.
	
	totalAmount := salesBooks sum: [ :sale | sale total ] ifEmpty: 0.
	
	purchaseList := Dictionary new.
	purchaseList at: 'totalAmount' put: totalAmount.
	
	salesBooks do: [ :sale | sale purchaseList do: [ :product | purchaseList at: product put: (sale purchaseList occurrencesOf: product) ]].
	
	^purchaseList.! !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 12/2/2020 17:55:11'!
salesBookForClient: aClientId
	
		^salesBooks at: aClientId ifAbsent: [
				^salesBooks at: aClientId put: OrderedCollection new
			]
		! !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 12/2/2020 17:55:21' prior: 50877688!
salesBookForClient: aClientId
	
		^salesBooks at: aClientId ifAbsent: [^salesBooks at: aClientId put: OrderedCollection new]
		! !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 12/2/2020 17:56:01'!
handleCheckoutCart: aCart withCreditCard: aCreditCard forClient: aClientId
	
		(Cashier toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: (self salesBookForClient: aClientId)) checkOut.
		! !

Object subclass: #ClientRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientRecord category: 'TusLibros' stamp: 'FD 12/2/2020 18:07:12'!
Object subclass: #ClientRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 18:07:40' prior: 50876259!
createCartFor: aClientId withPassword: aPassword
	
	self assertValidPassword: aPassword forClient: aClientId.
	
	^ self createCartAndGetIdFor: aClientId.
	! !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 12/2/2020 18:12:53'!
createCartAndGetIdFor: aClientId

	| newCartId |
	
	newCartId := self getNewCartId.
	
	(self clientRecordFor: aClientId) addCart: (Cart acceptingItemsOf: catalog) withId: newCartId.
	
	^newCartId.
		! !

!methodRemoval: TusLibrosInterface #createCartAndGetId stamp: 'FD 12/2/2020 18:13:10'!
createCartAndGetId

	| newCartId |
	
	newCartId := self getNewCartId.
	cartList at: newCartId put: (Cart acceptingItemsOf: catalog).
	^newCartId.
		!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 12/2/2020 18:14:23'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog cartList merchantProcessor salesBooks clientRecords'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'nil' stamp: 'FD 12/2/2020 18:14:22'!
clientRecordFor: aClientId

	^ clientRecords at: aClientId ifAbsent: [ ^clientRecords at: aClientId put: ClientRecord new].! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FD 12/2/2020 18:15:00' prior: 50877658!
initializeWithClientList: aClientList withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor

	clientList := aClientList.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	clientRecords := Dictionary new.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:15:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:15:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:15:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:15:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:15:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:15:23'!
ERROR!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 12/2/2020 18:17:06'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog cartList merchantProcessor salesBooks clientRecords lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 12/2/2020 18:17:05' prior: 50873164!
getNewCartId

	lastCartId := lastCartId + 1.
	^lastCartId
	! !
!TusLibrosInterface methodsFor: 'initialization' stamp: 'FD 12/2/2020 18:17:14' prior: 50877766!
initializeWithClientList: aClientList withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor

	clientList := aClientList.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	clientRecords := Dictionary new.
	lastCartId := 0.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:17:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:17:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:17:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:17:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:17:24'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:17:27'!
ERROR!
!ClientRecord methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:17:34'!
addCart: aCart withId: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #ClientRecord category: 'TusLibros' stamp: 'FD 12/2/2020 18:18:12'!
Object subclass: #ClientRecord
	instanceVariableNames: 'cartList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRecord methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:18:11' prior: 50877929!
addCart: aCart withId: aCartId 
	
	
	cartList at: aCartId put: aCart.! !
!ClientRecord methodsFor: 'nil' stamp: 'FD 12/2/2020 18:18:37' overrides: 16896425!
initialize

	cartList := Dictionary new.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:18:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:18:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:18:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:18:40'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:18:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:18:43'!
ERROR!
!ClientRecord methodsFor: 'nil' stamp: 'FD 12/2/2020 18:19:15'!
cartList

	^ cartList copy.! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 18:20:12'!
findClientRecordHolding: aCartId 
	
	self assertValidCartId: aCartId.
	^(cartList at: aCartId) list.! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 18:22:49' prior: 50878018!
findClientRecordHolding: aCartId 
	
	^clientRecords values detect: [ :clientRecord | clientRecord cartList includesKey: aCartId ] ifNone: self signalInvalidCartId.
	! !
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 18:23:23' prior: 50873300!
listCart: aCartId 
	
	^((self findClientRecordHolding: aCartId) cartList at: aCartId) list.! !
!TusLibrosInterface methodsFor: 'assertions' stamp: 'FD 12/2/2020 18:24:12' prior: 50875306!
assertValidCartId: aCartId

	self findClientRecordHolding: aCartId.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:24:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:24:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:24:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:24:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:24:16'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:24:16'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:24:16'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:24:16'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:24:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:24:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:24:16'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:24:16'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:24:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:24:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:24:16'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:24:16'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:24:16'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 18:24:54' prior: 50876046!
add: aQuantity of: anItem toCart: aCartId
	
	| cart |

	cart := (self findClientRecordHolding: aCartId ) cartList at: aCartId.
	
	self handleAction: [cart add: aQuantity of: anItem.]
	      onError: (self handleErrorforCart: cart).! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:24:56'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:24:56'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:24:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:24:56'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:24:56'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:24:56'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:25:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:25:10'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:25:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:25:10'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:25:10'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:25:10'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:25:12'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:25:12'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 18:25:57' prior: 50876230!
checkout: aCartId with: aCreditCard 
	
	self assertValidCartId: aCartId.
	
	self handleAction: [self handleCheckoutCart: aCartId withCreditCard: aCreditCard ]
	      onError: self handleCashierError.! !

!methodRemoval: TusLibrosInterface #handleCheckoutCart:withCreditCard:forClient: stamp: 'FD 12/2/2020 18:26:02'!
handleCheckoutCart: aCart withCreditCard: aCreditCard forClient: aClientId
	
		(Cashier toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: (self salesBookForClient: aClientId)) checkOut.
		!
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 12/2/2020 18:28:26' prior: 50877648!
handleCheckoutCart: aCartId withCreditCard: aCreditCard
	
		| cart |
		
		cart := (self findClientRecordHolding: aCartId) cartList at: aCartId.
	
		(Cashier toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: salesBooks) checkOut.
		! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:28:30'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:28:30'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:28:30'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:28:30'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:28:30'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:28:35'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:28:35'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:28:50'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:28:50'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:28:50'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:28:50'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:28:50'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:28:52'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:28:52'!
ERROR!

Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog merchantProcessor clientRecords lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterface category: 'TusLibros' stamp: 'FD 12/2/2020 18:30:36'!
Object subclass: #TusLibrosInterface
	instanceVariableNames: 'clientList catalog merchantProcessor clientRecords lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 12/2/2020 18:31:53' prior: 50878267!
handleCheckoutCart: aCartId withCreditCard: aCreditCard
	
		| clientRecord cart salesBook|
		
		clientRecord := self findClientRecordHolding: aCartId.
		cart := clientRecord cartList at: aCartId.
		salesBook := clientRecord salesBook.
	
		(Cashier toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor 
		on: DateAndTime today
		registeringOn: salesBook) checkOut.
		! !

!classDefinition: #ClientRecord category: 'TusLibros' stamp: 'FD 12/2/2020 18:32:14'!
Object subclass: #ClientRecord
	instanceVariableNames: 'cartList salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientRecord methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:32:11'!
salesBook

	^ salesBook copy.! !
!ClientRecord methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:32:34' prior: 50877947 overrides: 16896425!
initialize

	cartList := Dictionary new.
	salesBook := OrderedCollection new.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:32:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:32:39'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:32:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:32:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:32:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:35:00'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:35:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:35:00'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:35:00'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:35:00'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:35:02'!
ERROR!
!TusLibrosInterface methodsFor: 'actions' stamp: 'FD 12/2/2020 18:37:27' prior: 50877670!
listPurchasesFor: aClientId withPassword: aPassword

	| purchaseList totalAmount clientRecord |
	
	self assertValidPassword:  aPassword forClient: aClientId.
	
	clientRecord := self clientRecordFor: aClientId.
	totalAmount := clientRecord salesBook sum: [ :sale | sale total ] ifEmpty: 0.
	
	purchaseList := Dictionary new.
	purchaseList at: 'totalAmount' put: totalAmount.
	
	clientRecord salesBook do: [ :sale | sale purchaseList do: [ :product | purchaseList at: product put: (sale purchaseList occurrencesOf: product) ]].
	
	^purchaseList.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:37:38'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:37:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:37:38'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:37:38'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:37:41'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:38:04'!
FAILURE!
!ClientRecord methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:39:06' prior: 50878452!
salesBook

	^ salesBook.! !
!ClientRecord methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:39:10' prior: 50878014!
cartList

	^ cartList.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:39:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:39:13'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 18:40:00' prior: 50877488!
test17ListsPurchasesOnlyListsAClientsPurchases

		| tusLibrosInterface clientId validPassword expectedPurchaseList cartId creditCard|
	
	
	expectedPurchaseList := Dictionary new.
	expectedPurchaseList at: 'totalAmount' put: testObjectsFactory itemSellByTheStorePrice * 2.
	expectedPurchaseList  at: testObjectsFactory itemSellByTheStore put: 2.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
		
	cartId := tusLibrosInterface createCartFor: clientId withPassword: validPassword.
	tusLibrosInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory anotherValidClientId withPassword: validPassword.
	tusLibrosInterface add: 5 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: testObjectsFactory anotherValidClientId withPassword: validPassword) equals: expectedPurchaseList ! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:40:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:40:02'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:40:02'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'tests' stamp: 'FD 12/2/2020 18:40:11' prior: 50878745!
test17ListsPurchasesOnlyListsAClientsPurchases

		| tusLibrosInterface clientId validPassword expectedPurchaseList cartId creditCard|
	
	
	expectedPurchaseList := Dictionary new.
	expectedPurchaseList at: 'totalAmount' put: testObjectsFactory itemSellByTheStorePrice * 2.
	expectedPurchaseList  at: testObjectsFactory itemSellByTheStore put: 2.
	
	tusLibrosInterface := testObjectsFactory createTusLibrosInterface.
	clientId := testObjectsFactory validClientId.
	validPassword := testObjectsFactory validPassword.
	
		
	cartId := tusLibrosInterface createCartFor: clientId withPassword: validPassword.
	tusLibrosInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	cartId := tusLibrosInterface createCartFor: testObjectsFactory anotherValidClientId withPassword: validPassword.
	tusLibrosInterface add: 5 of: testObjectsFactory itemSellByTheStore toCart: cartId.
	creditCard := testObjectsFactory notExpiredCreditCard.
	tusLibrosInterface checkout: cartId with: creditCard.
	
	self assert: (tusLibrosInterface listPurchasesFor: clientId withPassword: validPassword) equals: expectedPurchaseList ! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:40:13'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'FD 12/2/2020 18:43:26'!
test09CartExpiresAfter30Minutes

	| cart |
	
	cart := testObjectsFactory createCart.
	
	
	
	
	self should: [cart add: 2 of: testObjectsFactory itemSellByTheStore.] raise: Error - MessageNotUnderstood withMessageText: cart expiredCartErrorMessage.
	! !

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 18:43:29'!
ERROR!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 18:43:29'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:43:38'!
expiredCartErrorMessage
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:43:50' prior: 50878971!
expiredCartErrorMessage
	
	^ 'Cart has expired'.! !
!CartTest methodsFor: 'tests' stamp: 'FD 12/2/2020 18:44:20' prior: 50878955!
test09CartExpiresAfter30Minutes

	| cart |
	
	cart := testObjectsFactory createCart.
	
	testObjectsFactory advance30minutes.
	
	
	self should: [cart add: 2 of: testObjectsFactory itemSellByTheStore.] raise: Error - MessageNotUnderstood withMessageText: cart expiredCartErrorMessage.
	! !

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'FD 12/2/2020 18:46:00'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Clock subclass: #ClockSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClockSimulator category: 'TusLibros' stamp: 'FD 12/2/2020 18:46:13'!
Clock subclass: #ClockSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'FD 12/2/2020 18:46:37'!
now

	self subclassResponsibility.! !

!classDefinition: #ClockSimulator category: 'TusLibros' stamp: 'FD 12/2/2020 18:47:37'!
Clock subclass: #ClockSimulator
	instanceVariableNames: 'offset'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClockSimulator methodsFor: 'no messages' stamp: 'FD 12/2/2020 18:47:35' overrides: 50879013!
now

	^ DateAndTime now + offset.! !
!ClockSimulator methodsFor: 'nil' stamp: 'FD 12/2/2020 18:47:54' overrides: 16896425!
initialize

	offset := 0.! !
!ClockSimulator methodsFor: 'as yet unclassified' stamp: 'FD 12/2/2020 18:48:01' prior: 50879029 overrides: 16896425!
initialize

	offset := 0 * minute.! !
!ClockSimulator methodsFor: 'nil' stamp: 'FD 12/2/2020 18:48:50'!
advanceInTime: minutes

	offset := offset + minutes.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'FD 12/2/2020 18:49:35' prior: 50868287!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog withClock: self clock.! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'FD 12/2/2020 18:50:15'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today debitBehavior clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'FD 12/2/2020 18:50:13' prior: 50879043!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog withClock: clock.! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'FD 12/2/2020 18:50:26' prior: 50874233 overrides: 16896425!
initialize

	today := DateAndTime now.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clock := ClockSimulator new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FD 12/2/2020 18:51:07'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'FD 12/2/2020 18:51:05'!
initializeAcceptingItemsOf: aCatalog withClock: aClock

	catalog := aCatalog.
	items := OrderedCollection new.
	clock := aClock.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FD 12/2/2020 18:54:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items clock lastActive'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'assertions' stamp: 'FD 12/2/2020 18:54:52'!
assertCartIsValid

	(clock now - lastActive) < 30 ifFalse: [ self error: self expiredCartErrorMessage ].
	lastActive := clock now.! !
!Cart methodsFor: 'initialization' stamp: 'FD 12/2/2020 18:55:05' prior: 50879077!
initializeAcceptingItemsOf: aCatalog withClock: aClock

	catalog := aCatalog.
	items := OrderedCollection new.
	clock := aClock.
	lastActive := clock now.! !

!methodRemoval: Cart #initializeAcceptingItemsOf: stamp: 'FD 12/2/2020 18:55:12'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.!
!Cart class methodsFor: 'instance creation' stamp: 'FD 12/2/2020 18:55:32'!
acceptingItemsOf: aCatalog withClock: aClock

	^self new initializeAcceptingItemsOf: aCatalog withClock: aClock! !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'FD 12/2/2020 18:55:41'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !
!TusLibrosInterface methodsFor: 'actions -- private' stamp: 'FD 12/2/2020 18:56:06' prior: 50877733!
createCartAndGetIdFor: aClientId

	| newCartId |
	
	newCartId := self getNewCartId.
	
	(self clientRecordFor: aClientId) addCart: (Cart acceptingItemsOf: catalog withClock: DateAndTime) withId: newCartId.
	
	^newCartId.
		! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:56:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 18:56:42'!
ERROR!
!ClockSimulator methodsFor: 'now' stamp: 'FD 12/2/2020 18:57:17' prior: 50879025 overrides: 50879013!
now

	^ DateAndTime now minutes + offset.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 12/2/2020 18:57:44'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 18:57:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 18:57:46'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 18:57:53'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 18:58:00'!
ERROR!
!ClockSimulator methodsFor: 'now' stamp: 'FD 12/2/2020 18:59:20' prior: 50879198 overrides: 50879013!
now

	^ DateAndTime now minute + offset.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 19:00:41'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:00:45'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 19:00:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 19:00:46'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:00:46'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'FD 12/2/2020 19:01:29'!
advance30minutes

	clock advanceInTime: 30*minute.! !

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 19:01:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:01:41'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 19:01:41'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:01:41'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:01:46'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 19:01:46'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:01:46'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'FD 12/2/2020 19:02:42' prior: 50873080!
list

	self assertCartIsValid.
	^items.! !
!Cart methodsFor: 'queries' stamp: 'FD 12/2/2020 19:02:50' prior: 50867809!
occurrencesOf: anItem

	self assertCartIsValid.
	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'FD 12/2/2020 19:02:57' prior: 50867813!
includes: anItem

	self assertCartIsValid.
	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'FD 12/2/2020 19:03:02' prior: 50867817!
isEmpty
	
	self assertCartIsValid.
	^items isEmpty ! !
!Cart methodsFor: 'total' stamp: 'FD 12/2/2020 19:03:12' prior: 50867821!
total

	self assertCartIsValid.
	^ items sum: [ :anItem | catalog at: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'FD 12/2/2020 19:03:18' prior: 50867833!
add: anItem

	self assertCartIsValid.
	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'FD 12/2/2020 19:03:24' prior: 50867825!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	self assertCartIsValid.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:03:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:03:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:03:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:03:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:03:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:03:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:03:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:03:28'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:03:28'!
FAILURE!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:03:28'!
FAILURE!
!Cart methodsFor: 'assertions' stamp: 'FD 12/2/2020 19:04:45' prior: 50879091!
assertCartIsValid

	(clock now - lastActive) minute < 30 ifFalse: [ self error: self expiredCartErrorMessage ].
	lastActive := clock now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:04:47'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:04:53'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'FD 12/2/2020 19:05:28' prior: 50879855!
assertCartIsValid

	| inactiveTime |
	
	inactiveTime := clock now - lastActive.
	
	inactiveTime < 30 ifFalse: [ self error: self expiredCartErrorMessage ].
	lastActive := clock now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:05:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:05:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:05:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:05:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:05:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:05:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:05:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:05:29'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:05:29'!
FAILURE!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:05:29'!
FAILURE!

self!

self < 30!

self < 30*minute.!

DateAndTime now.!

DateAndTime now minute!

DateAndTime now!

DateAndTime now!

DateAndTime now!

self!

self + 30!

self + 30*minute!
!ClockSimulator methodsFor: 'now' stamp: 'FD 12/2/2020 19:09:25' prior: 50879320 overrides: 50879013!
now

	^ DateAndTime now + offset.! !
!ClockSimulator methodsFor: 'now' stamp: 'FD 12/2/2020 19:10:04' prior: 50879939 overrides: 50879013!
now

	^ DateAndTime now + Duration minutes: offset.! !
!ClockSimulator methodsFor: 'now' stamp: 'FD 12/2/2020 19:10:16' prior: 50879944 overrides: 50879013!
now

	^ DateAndTime now + offset.! !
!ClockSimulator methodsFor: 'clock manipulation' stamp: 'FD 12/2/2020 19:10:28' prior: 50879038!
advanceInTime: minutes

	offset := offset + Duration minutes: minutes.! !
!ClockSimulator methodsFor: 'initialization' stamp: 'FD 12/2/2020 19:10:38' prior: 50879034 overrides: 16896425!
initialize

	offset := Duration minutes: 0.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:10:42'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:10:46'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'FD 12/2/2020 19:11:30' prior: 50879893!
assertCartIsValid

	| inactiveTime |
	
	inactiveTime := clock now - lastActive.
	
	inactiveTime < (Duration minutes: 30) ifFalse: [ self error: self expiredCartErrorMessage ].
	lastActive := clock now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:11:31'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:11:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:11:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:11:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:11:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:11:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:11:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:11:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:11:34'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:11:34'!
ERROR!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:11:34'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'clock' stamp: 'FD 12/2/2020 19:11:50' prior: 50879497!
advance30minutes

	clock advanceInTime: 30.! !

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:11:51'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:11:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:11:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:11:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:11:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:11:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:11:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:11:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:11:54'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:11:54'!
ERROR!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:11:54'!
ERROR!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:12:12'!
ERROR!
!ClockSimulator methodsFor: 'clock manipulation' stamp: 'FD 12/2/2020 19:12:25' prior: 50879954!
advanceInTime: minutes

	offset := offset + (Duration minutes: minutes).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:12:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CartTest #test09CartExpiresAfter30Minutes stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CanNotCreateACartWithAnInvalidClientId stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CanNotCreateACartWithAnInvalidPassword stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreatesANewCart stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04CanNotAddItemToAnInvalidCartId stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05CanNotAddInvalidItemToCart stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06CanNotAddInvalidItemQuantityToCart stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddsItemsToCart stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08OnlyAddsItemsToSpecifiedCart stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CanNotListAnInvalidCartId stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CanNotCheckoutAnInvalidCartId stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CanNotCheckoutWithAnExpiredCreditCard stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutRegistersASale stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CanNotListPurchasesWithAnInvalidClientId stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14CanNotListPurchasesWithAnInvalidPassword stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15OnlyListsTotalAmountWhenThereAreNoPurchasesForTheClient stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListsAllPurchasesForAClient stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListsPurchasesOnlyListsAClientsPurchases stamp: 'FD 12/2/2020 19:12:32'!
PASSED!

----QUIT----(2 December 2020 19:14:14) CuisUniversity-4384.image priorSource: 17433301!