

----STARTUP---- (25 October 2020 16:12:23) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover stamp: 'MS 10/25/2020 16:15:45'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:28:52'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'MS 10/25/2020 16:28:34'!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = 0@0.
self assert: MyRover direction = $N. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:29:30'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:29:30'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:30:02'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:30:02'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:30:17'!
initializeInPosition: aPoint facing: aCharacter 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInitializeInPosition: aPoint facing: aCharacter ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:31:13' prior: 50882086!
initializeInPosition: aPoint facing: aCharacter 

	^self new initializeInPosition: aPoint facing: aCharacter. ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:31:25' prior: 50882096!
initializeInPosition: aPoint facing: aDirection 

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:31:49'!
ERROR!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:11'!
initializeInPosition: aPoint facing: aDirection 
	self shouldBeImplemented.
	point := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:40' prior: 50882125!
initializeInPosition: aPoint facing: aDirection 
	
	point := aPoint.
	direction := aDirection.! !

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction positon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:54' prior: 50882132!
initializeInPosition: aPoint facing: aDirection 
	
	positon := aPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:33:03'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:33:24'!
position
	self shouldBeImplemented.! !

Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:34:15'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:34:26' prior: 50882154!
position
	^position.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:34:35'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:35:04' prior: 50882069!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:35:05'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:35:56'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:37:11' prior: 50882146!
initializeInPosition: aPoint facing: aDirection 
	
	position := aPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:19'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:20'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:37:31'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:37:36' prior: 50882200!
direction

	^direction! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:47'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:45:26'!
test02

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:45:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:45:35'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:45:35'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:45:57'!
processCommands: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:46:38' prior: 50882228!
processCommands: aString 
	
	position:= (0@1).! !

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:46:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:46:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:46:45'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:47:17'!
test03

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:47:25'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:47:25'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:49:31' prior: 50882233!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:51:26'!
test04

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:51:33'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:51:33'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:53:15' prior: 50882258!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].
				
	direction:= $E.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:53:40'!
test05

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:53:43'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:53:43'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:55:15' prior: 50882290!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].
				
	aString = 'r' ifTrue: [direction:= $E]
				ifFalse: [direction:= $O].! !

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:55:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:57:21'!
test06

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:41'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:06:29' prior: 50882318!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:06:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:13:15' prior: 50882368!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].
		
	aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:13:56'!
test07

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
! !

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:14:01'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:14:01'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:06:29' prior: 50882393!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:17:38'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:17:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:17:49'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:17:49'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:00'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:00'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:18:28'!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:38'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:18:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:28:13' prior: 50882493!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:28:32'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:28:39'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:28:39'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:29:03'!
InvalidCommandErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:29:30' prior: 50882590!
InvalidCommandErrorDescription
	
	^'Invalid Command'.! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:29:33'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:30:05' prior: 50882573!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:30:18'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:30:48'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:36:48' prior: 50882431!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [[aString = 'r' or: [aString = 'l']] 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]
			]
		ifFalse: [self signalInvalidCommand]].! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:36:53'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:38:14'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:38:14'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:41:24'!
FAILURE!

self class!
!MarsRover methodsFor: 'nil' stamp: 'MS 10/25/2020 17:43:59'!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:44:32' prior: 50882643!
SignalInvalidCommand

	self error: self class InvalidCommandErrorDescription! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:45:17'!
invalidCommandErrorDescription
	
	^'Invalid Command'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:45:17' prior: 50882649!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription! !

!methodRemoval: MarsRover class #InvalidCommandErrorDescription stamp: 'MS 10/25/2020 17:45:17'!
InvalidCommandErrorDescription
	
	^'Invalid Command'.!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!methodRemoval: MarsRoverTest #no_test08 stamp: 'MS 10/25/2020 17:46:16'!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!
!MarsRover methodsFor: 'signals' stamp: 'MS 10/25/2020 17:47:04'!
signalInvalidCommand

	self error: self class invalidCommandErrorDescription! !

!methodRemoval: MarsRover #SignalInvalidCommand stamp: 'MS 10/25/2020 17:47:04'!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:48:11' prior: 50882603!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:48:16'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:50:03' prior: 50882620!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]
			]
		ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:50:34' prior: 50882761!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:52:59'!
test01MarsRoverHasPostionAndDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. ! !

!methodRemoval: MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:52:59'!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:53:43'!
test02MarsRoverCanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!methodRemoval: MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:53:44'!
test02

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:02'!
test03MarsRoverCanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!methodRemoval: MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:54:03'!
test03

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:35'!
test04MarsRoverCanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!methodRemoval: MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:54:35'!
test04

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:47'!
MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:54:48'!
test05

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:58'!
test05MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #MarsRoverCanRotateLeft stamp: 'MS 10/25/2020 17:54:58'!
MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:55:53'!
test06MovingDoesNotAlterTheDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:55:55'!
test06

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:18'!
test02CanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!methodRemoval: MarsRoverTest #test02MarsRoverCanMoveForward stamp: 'MS 10/25/2020 17:56:18'!
test02MarsRoverCanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:28'!
test03CanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!methodRemoval: MarsRoverTest #test03MarsRoverCanMoveBackwards stamp: 'MS 10/25/2020 17:56:28'!
test03MarsRoverCanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:37'!
test04CanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!methodRemoval: MarsRoverTest #test04MarsRoverCanRotateRight stamp: 'MS 10/25/2020 17:56:37'!
test04MarsRoverCanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:44'!
test05CanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #test05MarsRoverCanRotateLeft stamp: 'MS 10/25/2020 17:56:44'!
test05MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:57:13'!
test07RotatingDoesNotAlterPosition

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:57:13'!
test07

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:58:14'!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:58:15'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:01:40'!
isMovementCommand: aString

	^ aString = 'f' or: [aString = 'b']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:01:40' prior: 50882775!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:04' prior: 50883021!
isMovementCommand: aCommand

	^ aCommand = 'f' or: [aCommand = 'b']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:35'!
isRotationCommand: aString

	^ aString = 'r' or: [aString = 'l']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:35' prior: 50883026!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:47' prior: 50883045!
isRotationCommand: aCommand

	^ aCommand = 'r' or: [aCommand = 'l']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:03:53' prior: 50883050!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:16'!
move: aString

	^ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:17' prior: 50883069!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:32' prior: 50883082!
move: aDirection

	^ aDirection = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:59'!
rotate: aString

	^ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:06:00' prior: 50883088!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ self rotate: aString]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:06:26' prior: 50883106!
rotate: aDirection

	^ aDirection = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:07:02' prior: 50883112!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ self rotate: aString]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:09:40' prior: 50883128!
processCommands: aString 
	
	self assertIsValidCommand: aString.
	
	(self isMovementCommand: aString) 
		ifTrue: [self move: aString].
	(self isRotationCommand: aString) 
		ifTrue: [ self rotate: aString].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:10:11'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:10:11'!
FAILURE!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:10:14'!
ERROR!
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:10:35'!
assertIsValidCommand: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:13:07' prior: 50883174!
assertIsValidCommand: aString 
	
	((self isMovementCommand: aString) or: [self isRotationCommand: aString]) ifFalse: [self signalInvalidCommand].! !

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:13:09'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:13:16'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:14:09'!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:15:44'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:15:45'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:20:37' prior: 50883138!
processCommands: aString 
	
	aString do:[:aCommand |self assertIsValidCommand: aCommand.
	
	(self isMovementCommand: aCommand) 
		ifTrue: [self move: aCommand].
	(self isRotationCommand: aCommand) 
		ifTrue: [ self rotate: aCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:12' prior: 50883040!
isMovementCommand: aCommand

	^ aCommand = $f or: [aCommand = $b]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:27' prior: 50883064!
isRotationCommand: aCommand

	^ aCommand = $r or: [aCommand = $l]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:42' prior: 50883100!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:22:05' prior: 50883122!
rotate: aDirection

	^ aDirection = $r 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:22:22' prior: 50883179!
assertIsValidCommand: aCommand 
	
	((self isMovementCommand: aCommand) or: [self isRotationCommand: aCommand]) ifFalse: [self signalInvalidCommand].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:23:43' prior: 50883226!
processCommands: aString 
	
	aString do:[:aCommand |
		self assertIsValidCommand: aCommand.
	
		(self isMovementCommand: aCommand) 
			ifTrue: [self move: aCommand].
		(self isRotationCommand: aCommand) 
			ifTrue: [ self rotate: aCommand]].! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:23:52'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:23:52'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:24:50' prior: 50883246!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + (0@1)]
			ifFalse: [position := (0@-1)]! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:24:57'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:24' prior: 50883214!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ffb'.

self assert: MyRover position = (0@1).
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:29' prior: 50883290!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@1).
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:54'!
test10

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:25:59'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:25:59'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:26:16' prior: 50883281!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + (0@1)]
			ifFalse: [position := position + (0@-1)]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:24'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:24'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:26:45' prior: 50883298!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:26:52'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:27:54'!
test11

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:28:24'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:28:24'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:29:46'!
RotateLeft

	^ direction:= $E! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:29:46' prior: 50883252!
rotate: aDirection

	^ aDirection = $r 
				ifTrue: [self RotateLeft]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:10' prior: 50883411!
rotate: aDirection

	^ aDirection = $l 
				ifTrue: [self RotateLeft]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:24'!
RotateRight

	^ direction:= $O! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:24' prior: 50883417!
rotate: aDirection

	^ aDirection = $l 
				ifTrue: [self RotateLeft]
				ifFalse: [self RotateRight]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:33:12' prior: 50883407!
RotateLeft

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:33:58' prior: 50883423!
RotateRight

	direction = $N ifTrue: [direction:= $O].
	direction = $E ifTrue: [direction:= $N].
	direction = $S ifTrue: [direction:= $E].
	direction = $O ifTrue: [direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:34:15'!
RotateLeft1

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:34:55' prior: 50883433!
RotateLeft

	direction = $N ifTrue: [direction:= $O].
	direction = $E ifTrue: [direction:= $N].
	direction = $S ifTrue: [direction:= $E].
	direction = $O ifTrue: [direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:35:05' prior: 50883442!
RotateRight

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !

!methodRemoval: MarsRover #RotateLeft1 stamp: 'MS 10/25/2020 18:35:18'!
RotateLeft1

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:36:03'!
FAILURE!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:36:50'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:38:51' prior: 50883459!
RotateLeft

	direction = $N ifTrue: [^direction:= $O].
	direction = $E ifTrue: [^direction:= $N].
	direction = $S ifTrue: [^direction:= $E].
	direction = $O ifTrue: [^direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:38:59' prior: 50883468!
RotateRight

	direction = $N ifTrue: [^direction:= $E].
	direction = $E ifTrue: [^direction:= $S].
	direction = $S ifTrue: [^direction:= $O].
	direction = $O ifTrue: [^direction:= $N].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:40:26'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'fab']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@1).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:40:30'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!methodRemoval: MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:41:34'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'fab']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@1).
self assert: MyRover direction = $N.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:43:24'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:43:28'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:43:28'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:45:45' prior: 50883319!
move: aDirection

	| forwardDirection |
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:48:26' prior: 50883674!
move: aDirection

	| forwardDirection |
	
	direction = $N ifTrue:[forwardDirection := (0@1)].
	direction = $E ifTrue:[forwardDirection := (1@0)].
	direction = $S ifTrue:[forwardDirection := (0@-1)].
	direction = $O ifTrue:[forwardDirection := (-1@0)].

	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!methodRemoval: MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:51:15'!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:51:55'!
test09canProcessMoreThanOneCommand

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:51:55'!
test10

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:52:29'!
test09canProcessMultipleMoveCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test09canProcessMoreThanOneCommand stamp: 'MS 10/25/2020 18:52:29'!
test09canProcessMoreThanOneCommand

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:02'!
test11canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!methodRemoval: MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:53:02'!
test11

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:15'!
test10canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!methodRemoval: MarsRoverTest #test11canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 18:53:15'!
test11canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:59'!
test11MovesAccordingItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!methodRemoval: MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:53:59'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:54:31'!
test11MovesTowardsItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!methodRemoval: MarsRoverTest #test11MovesAccordingItsDirection stamp: 'MS 10/25/2020 18:54:31'!
test11MovesAccordingItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 18:54:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:00:51'!
test12MarsRoverCantHaveAnInvalidPosition

|MyRover|

self should: [MyRover := MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidInitialPositionErrorDescription.
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:01:18' prior: 50883872!
test12MarsRoverCantHaveAnInvalidPosition

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidInitialPositionErrorDescription.
! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:01:24'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:01:24'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:01:45'!
invalidInitialPositionErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:02:12' prior: 50883898!
invalidInitialPositionErrorDescription
	
	^'Invalid position'! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:02:15'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:03:32' prior: 50882103!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:03:37'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:05:09'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:05:09'!
FAILURE!
!MarsRoverTest methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:05:13' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:02'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:02'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:06:32'!
ERROR!
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:06:59'!
assertIsValidPosition: aPoint 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:07:31' prior: 50884017!
assertIsValidPosition: aPoint 
	
	aPoint isKindOf: Point.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:09:02' prior: 50884022!
assertIsValidPosition: aPoint 
	
	(aPoint isKindOf: Point) ifFalse:[self error: self invalidInitialPositionErrorDescription].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:09:05'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:11'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:09:11'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:31'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:49'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:12:24'!
invalidPositionErrorDescription
	
	^'Invalid position'! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:12:24' prior: 50884027!
assertIsValidPosition: aPoint 
	
	(aPoint isKindOf: Point) ifFalse:[self error: self invalidPositionErrorDescription].! !

!methodRemoval: MarsRover class #invalidInitialPositionErrorDescription stamp: 'MS 10/25/2020 19:12:24'!
invalidInitialPositionErrorDescription
	
	^'Invalid position'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:12:52' prior: 50883882!
test12MarsRoverCantHaveAnInvalidPosition

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidPositionErrorDescription.
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:12:58'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:12:58'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:06'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:06'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:38'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:14:10'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:15:10'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:16:57' prior: 50883913!
initializeInPosition: aPoint facing: aDirection 

	"self assertIsValidPosition: aPoint."

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:04'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:17:04'!
FAILURE!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:21'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:21'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:18:20'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:27:20'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:29:41' prior: 50882998!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover invalidCommandErrorDescription].


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:29:44'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:29:44'!
ERROR!

!methodRemoval: MarsRoverTest #assert:description: stamp: 'MS 10/25/2020 19:31:08'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:15'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:15'!
FAILURE!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:31:28'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:33'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:33'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:31:51' prior: 50884162!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:59'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:32:26' prior: 50884221!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:32:29'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:33:00'!
test13MarsRoverCantHaveAnInvalidDirection

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidDirectionErrorDescription.
! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:05'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:05'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:33:21'!
invalidDirectionErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:33:37' prior: 50884376!
invalidDirectionErrorDescription
	
	^'Invalid Direction'.! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:39'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:34:29' prior: 50884360!
test13MarsRoverCantHaveAnInvalidDirection

self should: [MarsRover initializeInPosition: (0@0) facing: 0.]
	
	raise: Error
		withMessageText: MarsRover invalidDirectionErrorDescription.
! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:34:32'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:34:32'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:35:11' prior: 50884298!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.
	self assertIsValidDirection: aDirection.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:35:25'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:35:25'!
FAILURE!
!MarsRoverTest methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:35:30' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!methodRemoval: MarsRoverTest #assert:description: stamp: 'MS 10/25/2020 19:35:54'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:36:12'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:36:12'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:36:16'!
ERROR!
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:36:30'!
assertIsValidDirection: aCharacter 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:39:53' prior: 50884475!
assertIsValidDirection: aDirection 
	(aDirection = $N or:[aDirection = $E or: [aDirection = $S or:[aDirection =  $W]]])
		ifFalse:[self error: self invalidDirectionErrorDescription].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:39:55'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

Object subclass: #Compass
	instanceVariableNames: 'direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: #MarsRover stamp: 'MS 10/25/2020 19:51:38'!
Object subclass: #Compass
	instanceVariableNames: 'direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Compass category: #MarsRover stamp: 'MS 10/25/2020 19:53:18'!
Object subclass: #Compass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Compass class methodsFor: 'nil' stamp: 'MS 10/25/2020 19:55:50'!
degreeToChar: aDegree

	aDegree = 0 ifTrue:[^$N].
	aDegree = 90 ifTrue:[^$E].
	aDegree = 180 ifTrue:[^$S].
	aDegree = 270 ifTrue:[^$O].! !
!Compass class methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:58:27' prior: 50884554!
degreeToChar: aDegree

	|NormalizedDegree|

	NormalizedDegree := aDegree % 360.
	NormalizedDegree = 0 ifTrue:[^$N].
	NormalizedDegree = 90 ifTrue:[^$E].
	NormalizedDegree = 180 ifTrue:[^$S].
	NormalizedDegree = 270 ifTrue:[^$O].! !
!Compass class methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:58:43' prior: 50884562!
degreeToChar: aDegree

	|NormalizedDegree|

	NormalizedDegree := aDegree % 360.
	
	NormalizedDegree = 0 ifTrue:[^$N].
	NormalizedDegree = 90 ifTrue:[^$E].
	NormalizedDegree = 180 ifTrue:[^$S].
	NormalizedDegree = 270 ifTrue:[^$O].! !
!Compass class methodsFor: 'convertions' stamp: 'MS 10/25/2020 20:01:31'!
charToDegree: aChar

	aChar = $N ifTrue:[^0].
	aChar = $E ifTrue:[^90].
	aChar = $S ifTrue:[^180].
	aChar = $O ifTrue:[^270].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:01:40'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:01:41'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:01:41'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 20:02:57' prior: 50882190!
initializeInPosition: aPoint facing: aDirection 
	
	position := aPoint.
	direction := Compass charToDegree: aDirection.! !
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 20:03:20' prior: 50882205!
direction

	^Compass degreeToChar: direction.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:03:46' prior: 50883522!
RotateLeft

	direction:= direction -90.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:03:58' prior: 50883531!
RotateRight

	direction = direction + 90.! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:04:06'!
FAILURE!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:04:06'!
FAILURE!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:04:06'!
FAILURE!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:04:06'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:04:06'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:04:06'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:05:22' prior: 50883682!
move: aDirection

	| forwardDirection |
	
	self direction = $N ifTrue:[forwardDirection := (0@1)].
	self direction = $E ifTrue:[forwardDirection := (1@0)].
	self direction = $S ifTrue:[forwardDirection := (0@-1)].
	self direction = $O ifTrue:[forwardDirection := (-1@0)].

	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:05:26'!
FAILURE!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:05:26'!
FAILURE!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:05:26'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:05:27'!
FAILURE!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:05:27'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:05:27'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:05:27'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:05:27'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:05:27'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:05:59'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:08:30'!
ERROR!
!Compass class methodsFor: 'convertions' stamp: 'MS 10/25/2020 20:11:19' prior: 50884573!
degreeToChar: aDegree

	|NormalizedDegree|

	NormalizedDegree := aDegree \\ 360.
	
	NormalizedDegree = 0 ifTrue:[^$N].
	NormalizedDegree = 90 ifTrue:[^$E].
	NormalizedDegree = 180 ifTrue:[^$S].
	NormalizedDegree = 270 ifTrue:[^$O].! !

 5.0 \\ 3.0!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:12:08'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:12:08'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:12:08'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:12:08'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:12:24'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:13:02'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:13:08'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:13:12'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:14:26' prior: 50884647!
RotateRight

	direction := direction + 90.! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:14:30'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:14:30'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:14:53' prior: 50884643!
RotateLeft

	direction := direction -90.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:23:05' prior: 50884692!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction-90)/180 even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).
	"
	self direction = $N ifTrue:[forwardDirection := (0@1)].
	self direction = $E ifTrue:[forwardDirection := (1@0)].
	self direction = $S ifTrue:[forwardDirection := (0@-1)].
	self direction = $O ifTrue:[forwardDirection := (-1@0)].
"
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:23:08'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:23:08'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:23:08'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:23:09'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:23:09'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:23:09'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:23:09'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:23:09'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:23:31' prior: 50884866!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90)/180 even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).
	"
	self direction = $N ifTrue:[forwardDirection := (0@1)].
	self direction = $E ifTrue:[forwardDirection := (1@0)].
	self direction = $S ifTrue:[forwardDirection := (0@-1)].
	self direction = $O ifTrue:[forwardDirection := (-1@0)].
"
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:23:36' prior: 50884927!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).
	"
	self direction = $N ifTrue:[forwardDirection := (0@1)].
	self direction = $E ifTrue:[forwardDirection := (1@0)].
	self direction = $S ifTrue:[forwardDirection := (0@-1)].
	self direction = $O ifTrue:[forwardDirection := (-1@0)].
"
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:23:53'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:23:54'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:23:54'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:24:34' prior: 50884948!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).

	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:26:05' prior: 50885009!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromDirection]
			ifFalse: [position := position - self getMovementFromDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:26:35'!
getMovementFromDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis)! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:26:35' prior: 50885022!
move: aDirection

	self getMovementFromDirection.

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromDirection]
			ifFalse: [position := position - self getMovementFromDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:26:59' prior: 50885046!
move: aDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis).

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromDirection]
			ifFalse: [position := position - self getMovementFromDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:29:22' prior: 50885055!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromDirection]
			ifFalse: [position := position - self getMovementFromDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:29:38'!
getMovementFromFacingDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 20:29:38' prior: 50885069!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + self getMovementFromFacingDirection]
			ifFalse: [position := position - self getMovementFromFacingDirection]! !

!methodRemoval: MarsRover #getMovementFromDirection stamp: 'MS 10/25/2020 20:29:38'!
getMovementFromDirection

	| forwardDirection xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	forwardDirection := (xAxis@yAxis)!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 20:30:03' prior: 50885077!
getMovementFromFacingDirection

	|xAxis yAxis|
	
	xAxis := (direction/90) odd ifTrue:[1] ifFalse: [0]	.
	yAxis := (direction/90) even ifTrue:[1] ifFalse:[0].
	
	^(xAxis@yAxis)! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:30:10'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:33:16'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 20:34:05'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 20:34:06'!
PASSED!

----SNAPSHOT----(25 October 2020 20:37:06) CuisUniversity-4365.image priorSource: 17612627!

----QUIT----(25 October 2020 20:37:07) CuisUniversity-4365.image priorSource: 17714717!

----STARTUP---- (2 November 2020 19:15:25) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


----End fileIn of \Users\mdlcs\Downloads\OS\cuis3\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:19:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:44'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:19:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:19:44'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 19:32:09' prior: 50885457!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value]  ifFalse: [aTransaction value]] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:13'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:32:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 19:32:26' prior: 50885530!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value]  ifFalse: [aTransaction value not]] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:32:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:32:30'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 19:33:14' prior: 50885568!
balance

	^transactions sum: [ :aTransaction | (aTransaction isKindOf: Deposit) ifTrue: [aTransaction value]  ifFalse: [aTransaction value negated]] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:33:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:33:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:33:18'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 19:38:40' prior: 50885606!
balance

	^transactions sum: [ :aTransaction | aTransaction accountForBalance] ifEmpty: [ 0 ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:38:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:38:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:38:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:38:47'!
ERROR!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:39:14'!
accountForBalance
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:39:32' prior: 50885677!
accountForBalance
	
	self subclassResponsibility.! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:39:37'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:39:50' overrides: 50885682!
accountForBalance
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:40:09' prior: 50885691 overrides: 50885682!
accountForBalance
	^self value.! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:14'!
ERROR!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:40:20' overrides: 50885682!
accountForBalance
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:40:34' prior: 50885708 overrides: 50885682!
accountForBalance
	^self value negated .! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:40:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 19:40:45'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: #'Portfolio-Ejercicio' stamp: 'MS 11/2/2020 19:50:35'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'MS 11/2/2020 19:54:30'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'MS 11/2/2020 19:53:28'!
test01PortfolioHasZeroAsBalanceWhenCreated 

	| aPortfolio |
	
	aPortfolio := Portfolio new.

	self assert: 0 equals: Portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 19:54:41' prior: 50885767!
test01PortfolioHasZeroAsBalanceWhenCreated 

	| aPortfolio |
	
	aPortfolio := Portfolio new.

	self assert: 0 equals: aPortfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:54:45'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:54:45'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/2/2020 19:54:57'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/2/2020 19:55:06' prior: 50885789!
balance
	^0.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:55:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 19:55:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 20:03:27'!
test02AddingAccountChangesBalanceByAccountBalance

	| aPortfolio  account |
	
	account := ReceptiveAccount  new.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: account balance.


! !

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:03:34'!
ERROR!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:03:34'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 20:32:16' prior: 50885641!
balance
	
	|balance|

	balance:= 0.
	balance := transactions do: [ :aTransaction | aTransaction accountForBalance: balance].
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:32:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:32:22'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:32:22'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 20:32:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 20:32:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 20:32:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 20:32:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:32:27'!
ERROR!
!Deposit methodsFor: 'value' stamp: 'MS 11/2/2020 20:33:00'!
accountForBalance: balance
	^balance + self value.! !

!methodRemoval: Deposit #accountForBalance stamp: 'MS 11/2/2020 20:35:59'!
accountForBalance
	^self value.!
!Withdraw methodsFor: 'value' stamp: 'MS 11/2/2020 20:36:22'!
accountForBalance: balance
	^balance - self value.! !

!methodRemoval: Withdraw #accountForBalance stamp: 'MS 11/2/2020 20:36:26'!
accountForBalance
	^self value negated .!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 20:36:43' prior: 50885820!
balance
	
	|balance|

	balance:= 0.
	balance := transactions do: [ :aTransaction | balance := aTransaction accountForBalance: balance].
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:36:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:36:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:36:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 20:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 20:36:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 20:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 20:36:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:36:58'!
FAILURE!
!Deposit methodsFor: 'value' stamp: 'MS 11/2/2020 20:39:58' prior: 50885857!
accountForBalance: balance

	|temp|

	temp := balance + self value. 
	^balance + self value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:40:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:40:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:40:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 20:40:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 20:40:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 20:40:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 20:40:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:40:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MS 11/2/2020 20:43:10' prior: 50885874!
balance
	
	|balance|

	balance:= 0.
	transactions do: [ :aTransaction | balance := aTransaction accountForBalance: balance].
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:43:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/2/2020 20:43:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/2/2020 20:43:24'!
PASSED!
!Deposit methodsFor: 'value' stamp: 'MS 11/2/2020 20:44:02' prior: 50885912!
accountForBalance: balance
	^balance + self value.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 20:45:28' prior: 50885803!
test02AddingAccountChangesBalanceByAccountBalance

	| aPortfolio  account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: aPortfolio balance.


! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:45:32'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:45:32'!
ERROR!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:45:32'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 20:45:56'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 20:47:00' prior: 50886012!
add: aReceptiveAccount 
	self balance.! !

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:47:03'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'MS 11/2/2020 20:50:08'!
intialize

	contents := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:50:16'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:50:16'!
FAILURE!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:50:16'!
FAILURE!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 20:50:58' prior: 50886017!
add: aReceptiveAccount 
	
	contents add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:51:13'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:51:13'!
ERROR!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:51:13'!
ERROR!
!Portfolio methodsFor: 'intialization' stamp: 'MS 11/2/2020 20:51:52' overrides: 16896425!
initialize

	contents := OrderedCollection new.! !

!methodRemoval: Portfolio #intialize stamp: 'MS 11/2/2020 20:51:55'!
intialize

	contents := OrderedCollection new.!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:51:58'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:51:58'!
FAILURE!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:51:58'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/2/2020 20:56:04' prior: 50885793!
balance
	^contents sum: [ :anItem | anItem balance] ifEmpty: [ 0 ].! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 20:56:09'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 20:56:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 20:58:42'!
test03PortfolioKnowsRegisteredTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
		
	self assert: (account hasRegistered: deposit).


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/2/2020 21:00:07' prior: 50886086!
test03PortfolioKnowsRegisteredTransactions 

	| aPortfolio  account deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aPortfolio add: account.
		
	self assert: (aPortfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 21:00:12'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 21:00:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:00:12'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:00:12'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 21:00:19'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 21:06:29' prior: 50886121!
hasRegistered: aDeposit 
	^ aDeposit = contents detect: [:anItem | anItem hasRegistered: aDeposit].! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 21:10:35' prior: 50886126!
hasRegistered: aDeposit 
	"^ aDeposit = contents detect: [:anItem | anItem hasRegistered: aDeposit] ifNone: []."
	^ contents select: [:anItem | anItem hasRegistered: aDeposit] size = 1.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:10:38'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/2/2020 21:11:14' prior: 50886132!
hasRegistered: aDeposit 
	"^ aDeposit = contents detect: [:anItem | anItem hasRegistered: aDeposit] ifNone: []."
	^ (contents select: [:anItem | anItem hasRegistered: aDeposit]) size = 1.! !

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:11:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/2/2020 21:11:25'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/2/2020 21:11:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/2/2020 21:11:25'!
PASSED!

----QUIT----(2 November 2020 21:23:00) CuisUniversity-4365.image priorSource: 17714810!

----STARTUP---- (3 November 2020 16:41:15) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 16:43:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 16:45:50'!
test04PortfolioDoesNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 16:46:34' prior: 50886177!
test04PortfolioDoesNotKnowNotRegisteredTransactions

	| deposit withdraw account aPortfolio |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
	
	aPortfolio := Portfolio  new.
	aPortfolio add: account.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 16:47:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 16:51:27'!
test05PortfolioKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 16:52:37' prior: 50886207!
test05PortfolioKnowsItsTransactions 

	| account1 deposit1 aPortfolio|
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 50 on: account1.
	
	aPortfolio := Portfolio  new.
	aPortfolio add: account1.
		
	self assert: 1 equals: aPortfolio transactions size.
	self assert: (aPortfolio transactions includes: deposit1).
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 16:52:56'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 16:52:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 16:52:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 16:52:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 16:52:56'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 16:52:56'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 16:53:02'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 17:02:27' prior: 50886253!
transactions
	
	|allTransactions|

	contents do: [:anItem | allTransactions:= allTransactions, anItem transactions].
	^allTransactions.
	! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 17:04:15' prior: 50886257!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.
	contents do: [:anItem | allTransactions:= allTransactions addAll: anItem transactions].
	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:04:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:04:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:06:43'!
test06AddingPortfolioChangesBalanceByPortfolioBalance

	| aPortfolio  account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	aPortfolio := Portfolio  new.
	
	aPortfolio add: account.
		
	self assert: 100 equals: aPortfolio balance.


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:08:59' prior: 50886279!
test06AddingPortfolioChangesBalanceByPortfolioBalance

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.


! !

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 17:09:04'!
PASSED!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 17:10:33' prior: 50886039!
add: anItem 
	
	contents add: anItem.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:15:42'!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:18:34' prior: 50886313!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.


! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:18:41'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:18:41'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:28:56'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:28:56'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:33:53' prior: 50886328!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
	self assert: (aBiggerPortfolio transactions find: [:aTransaction | aTransaction = account]) = 
				((aBiggerPortfolio transactions find: [:aTransaction | aTransaction = aPortfolio])
				find: [:aTransaction | aTransaction = account]).

! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:33:59'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:33:59'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:34:50' prior: 50886361!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
	self assert: ((aBiggerPortfolio transactions) find: [:aTransaction | aTransaction = account]) = 
				(((aBiggerPortfolio transactions) find: [:aTransaction | aTransaction = aPortfolio])
				find: [:aTransaction | aTransaction = account]).

! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:34:54'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:34:55'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:36:51' prior: 50886394!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
	self assert: ((aBiggerPortfolio transactions) detect: [:aTransaction | aTransaction = account]) = 
				(((aBiggerPortfolio transactions) detect: [:aTransaction | aTransaction = aPortfolio])
				detect: [:aTransaction | aTransaction = account]).

! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:36:56'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:36:56'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 17:38:36'!
contents 
	
	^contents.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:38:53' prior: 50886427!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
	self assert: ((aBiggerPortfolio contents) detect: [:aTransaction | aTransaction = account]) = 
				(((aBiggerPortfolio contents) detect: [:aTransaction | aTransaction = aPortfolio])
				detect: [:aTransaction | aTransaction = account]).

! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:38:58'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:38:58'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:41:14' prior: 50886463!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	"self assert: 1 equals: aBiggerPortfolio transactions size."
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:44:54' prior: 50886496!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 17:49:07' prior: 50886264!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	contents do: [:anItem | allTransactions:= anItem addNewTransactions: allTransactions].

	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:49:34'!
ERROR!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 17:49:34'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:49:34'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:49:38'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:50:07'!
addNewTransactions: anOrderedCollection 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 17:54:47' prior: 50886568!
addNewTransactions: aTransactionList 
	|newTransactions|
	
	newTransactions:= aTransactionList  reject: [:aTransaction| self transactions includes: aTransaction].  
	
	^aTransactionList addAll: newTransactions .! !

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:54:53'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:54:59'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 17:55:06'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 17:55:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 17:55:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 17:55:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:55:07'!
FAILURE!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 17:55:07'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:55:07'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:55:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 17:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 11/3/2020 17:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 11/3/2020 17:56:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 11/3/2020 17:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 11/3/2020 17:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 17:56:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 11/3/2020 17:56:35'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:56:41'!
FAILURE!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 17:56:41'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 17:56:41'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:57:43'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 17:58:18'!
FAILURE!

newTransactions!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:01:28' prior: 50886574!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= aTransactionList  reject: [:aTransaction| self transactions includes: aTransaction].  
	
	result :=  aTransactionList addAll: newTransactions .
	^result.! !

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:01:30'!
FAILURE!

^result!

^result!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:03:03' prior: 50886677!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= aTransactionList  select: [:aTransaction| self transactions includes: aTransaction].  
	
	result :=  aTransactionList addAll: newTransactions .
	^result.! !

^result!

^result!

aTransactionList!

newTransactions!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:04:52' prior: 50886692!
addNewTransactions: aTransactionList 
	|newTransactions result|
	
	newTransactions:= self transactions reject: [:aTransaction| aTransactionList includes: aTransaction].  
	
	result :=  aTransactionList addAll: newTransactions .
	^result.! !

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:04:58'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:05:02'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:05:02'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:05:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:05:02'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:05:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:05:03'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:05:03'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:05:03'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:05:11'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:05:12'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:06:22'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:07:15' prior: 50886514!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
	aBiggerPortfolio add: account.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:07:18'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:07:18'!
ERROR!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 18:07:39'!
addNewTransactions: anOrderedCollection 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 18:15:47' prior: 50886783!
addNewTransactions: aTransactionList
	
	|newTransactions|

	contents do: [:anItem | newTransactions := anItem addNewTransactions: aTransactionList].

	^newTransactions.! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:15:57'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:16:20'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:16:20'!
FAILURE!

allTransactions!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:19:57'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:19:57'!
FAILURE!
!Portfolio methodsFor: 'actions' stamp: 'MS 11/3/2020 18:21:54' prior: 50886788!
addNewTransactions: aTransactionList
	
	|newTransactions|
	newTransactions := aTransactionList .

	contents do: [:anItem | newTransactions := anItem addNewTransactions: aTransactionList].

	^newTransactions.! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:21:57'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:26:17' prior: 50886531!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	contents do: [:anItem | allTransactions:= allTransactions addAll: (anItem addNewTransactions: allTransactions)].

	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:26:19'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:26:53' prior: 50886759!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	"self assert: 100 equals: aBiggerPortfolio balance."
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:27:01'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:27:44' prior: 50886829!
transactions
	
	|allTransactions|
	allTransactions := OrderedCollection new.

	contents do: [:anItem | allTransactions:= (anItem addNewTransactions: allTransactions)].

	
	^allTransactions.
	! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:27:47'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:27:48'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:27:48'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:27:48'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:28:28' prior: 50886843!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	"self assert: 1 equals: aBiggerPortfolio transactions size."
! !

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:28:29'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:28:45' prior: 50886902!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:30:00' prior: 50886074!
balance
	^self transactions sum: [ :anItem | anItem balance] ifEmpty: [ 0 ].! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:30:06'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:30:06'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:30:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:30:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:30:06'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:30:06'!
ERROR!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:30:06'!
FAILURE!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:30:18'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:32:29' prior: 50886940!
balance
       |balance|

	balance:= 0.	

	^self transactions sum: [ :anItem | balance:= anItem accountForBalance: balance] ifEmpty: [ 0 ].! !
!Portfolio methodsFor: 'accessing' stamp: 'MS 11/3/2020 18:32:40' prior: 50886974!
balance
       |balance|

	balance:= 0.	

	self transactions sum: [ :anItem | balance:= anItem accountForBalance: balance] ifEmpty: [ 0 ].
	
	^balance.! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:32:45'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:32:46'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:32:46'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:32:46'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2020 18:32:54'!
no_test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
! !

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:32:57'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:32:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:32:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:32:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:32:58'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:32:58'!
PASSED!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:32:58'!
FAILURE!

!testRun: #PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:32:58'!
FAILURE!

!methodRemoval: PortfolioTest #test07AddingPortfolioDoesNotAddAccountsItAlreadyHas stamp: 'MS 11/3/2020 18:33:03'!
test07AddingPortfolioDoesNotAddAccountsItAlreadyHas

	| aPortfolio aBiggerPortfolio account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	aPortfolio := Portfolio  new.
	aBiggerPortfolio := Portfolio  new.
	
	aPortfolio add: account.
	aBiggerPortfolio add: account.
	aBiggerPortfolio add: aPortfolio.
		
	self assert: 100 equals: aBiggerPortfolio balance.
	self assert: 1 equals: aBiggerPortfolio transactions size.
!

!testRun: #PortfolioTest #test01PortfolioHasZeroAsBalanceWhenCreated stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test02AddingAccountChangesBalanceByAccountBalance stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioKnowsRegisteredTransactions stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotKnowNotRegisteredTransactions stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioKnowsItsTransactions stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

!testRun: #PortfolioTest #test06AddingPortfolioChangesBalanceByPortfolioBalance stamp: 'MS 11/3/2020 18:33:07'!
PASSED!

----SNAPSHOT----(3 November 2020 18:34:06) CuisUniversity-4365.image priorSource: 17744509!