

----STARTUP---- (25 October 2020 16:12:23) as C:\Users\mdlcs\Downloads\OS\cuis3\CuisUniversity-4365.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover stamp: 'MS 10/25/2020 16:15:45'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:28:52'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'MS 10/25/2020 16:28:34'!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = 0@0.
self assert: MyRover direction = $N. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:29:30'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:29:30'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:30:02'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:30:02'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:30:17'!
initializeInPosition: aPoint facing: aCharacter 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInitializeInPosition: aPoint facing: aCharacter ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:31:13' prior: 50882086!
initializeInPosition: aPoint facing: aCharacter 

	^self new initializeInPosition: aPoint facing: aCharacter. ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 16:31:25' prior: 50882096!
initializeInPosition: aPoint facing: aDirection 

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:31:49'!
ERROR!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:11'!
initializeInPosition: aPoint facing: aDirection 
	self shouldBeImplemented.
	point := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:40' prior: 50882125!
initializeInPosition: aPoint facing: aDirection 
	
	point := aPoint.
	direction := aDirection.! !

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:32:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction positon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:32:54' prior: 50882132!
initializeInPosition: aPoint facing: aDirection 
	
	positon := aPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:33:03'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:33:24'!
position
	self shouldBeImplemented.! !

Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'MS 10/25/2020 16:34:15'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:34:26' prior: 50882154!
position
	^position.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:34:35'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:35:04' prior: 50882069!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. ! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:35:05'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:35:56'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/25/2020 16:37:11' prior: 50882146!
initializeInPosition: aPoint facing: aDirection 
	
	position := aPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:19'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:20'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:37:31'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'accessing' stamp: 'MS 10/25/2020 16:37:36' prior: 50882200!
direction

	^direction! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:37:47'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:45:26'!
test02

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:45:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:45:35'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:45:35'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:45:57'!
processCommands: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:46:38' prior: 50882228!
processCommands: aString 
	
	position:= (0@1).! !

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:46:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:46:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:46:45'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:47:17'!
test03

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:47:25'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:47:25'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:49:31' prior: 50882233!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:49:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:50:14'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:51:26'!
test04

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:51:33'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:51:33'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:53:15' prior: 50882258!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].
				
	direction:= $E.! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:53:21'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:53:40'!
test05

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:53:43'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:53:43'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 16:55:15' prior: 50882290!
processCommands: aString 
	
	aString = 'f' ifTrue: [position:= (0@1)]
				ifFalse: [position := (0@-1)].
				
	aString = 'r' ifTrue: [direction:= $E]
				ifFalse: [direction:= $O].! !

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:55:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:55:21'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 16:57:21'!
test06

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 16:57:25'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:25'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 16:57:41'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:06:29' prior: 50882318!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:06:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:06:43'!
PASSED!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:13:15' prior: 50882368!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].
		
	aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:13:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:13:56'!
test07

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
! !

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:14:01'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:14:01'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:06:29' prior: 50882393!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [ aString = 'r' 
			ifTrue: [direction:= $E]
			ifFalse: [direction:= $O]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:15:14'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:17:38'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:17:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:17:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:17:49'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:17:49'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:00'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:00'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:18:28'!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:18:38'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:18:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:18:42'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:28:13' prior: 50882493!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:28:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:28:24'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:28:32'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:28:39'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:28:39'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:29:03'!
InvalidCommandErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:29:30' prior: 50882590!
InvalidCommandErrorDescription
	
	^'Invalid Command'.! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:29:33'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:30:05' prior: 50882573!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:30:18'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:30:48'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:36:48' prior: 50882431!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [[aString = 'r' or: [aString = 'l']] 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]
			]
		ifFalse: [self signalInvalidCommand]].! !

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:36:53'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:38:14'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:38:14'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:41:24'!
FAILURE!

self class!
!MarsRover methodsFor: 'nil' stamp: 'MS 10/25/2020 17:43:59'!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:44:32' prior: 50882643!
SignalInvalidCommand

	self error: self class InvalidCommandErrorDescription! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 17:45:17'!
invalidCommandErrorDescription
	
	^'Invalid Command'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:45:17' prior: 50882649!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription! !

!methodRemoval: MarsRover class #InvalidCommandErrorDescription stamp: 'MS 10/25/2020 17:45:17'!
InvalidCommandErrorDescription
	
	^'Invalid Command'.!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:46:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:46:06'!
ERROR!

!methodRemoval: MarsRoverTest #no_test08 stamp: 'MS 10/25/2020 17:46:16'!
no_test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'a'.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover InvalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!
!MarsRover methodsFor: 'signals' stamp: 'MS 10/25/2020 17:47:04'!
signalInvalidCommand

	self error: self class invalidCommandErrorDescription! !

!methodRemoval: MarsRover #SignalInvalidCommand stamp: 'MS 10/25/2020 17:47:04'!
SignalInvalidCommand

	self error: self class invalidCommandErrorDescription!

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:47:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:47:31'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:48:11' prior: 50882603!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:48:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:48:16'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:48:16'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:50:03' prior: 50882620!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]
			]
		ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 17:50:34' prior: 50882761!
processCommands: aString 
	
	(aString = 'f' or: [aString = 'b']) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !

!testRun: #MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:50:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:52:59'!
test01MarsRoverHasPostionAndDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. ! !

!methodRemoval: MarsRoverTest #test01 stamp: 'MS 10/25/2020 17:52:59'!
test01

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self assert: MyRover position = (0@0).
self assert: MyRover direction = $N. !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:53:43'!
test02MarsRoverCanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!methodRemoval: MarsRoverTest #test02 stamp: 'MS 10/25/2020 17:53:44'!
test02

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:02'!
test03MarsRoverCanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!methodRemoval: MarsRoverTest #test03 stamp: 'MS 10/25/2020 17:54:03'!
test03

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:35'!
test04MarsRoverCanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!methodRemoval: MarsRoverTest #test04 stamp: 'MS 10/25/2020 17:54:35'!
test04

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:47'!
MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #test05 stamp: 'MS 10/25/2020 17:54:48'!
test05

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:54:58'!
test05MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #MarsRoverCanRotateLeft stamp: 'MS 10/25/2020 17:54:58'!
MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:55:53'!
test06MovingDoesNotAlterTheDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test06 stamp: 'MS 10/25/2020 17:55:55'!
test06

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover direction = $N.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:18'!
test02CanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
! !

!methodRemoval: MarsRoverTest #test02MarsRoverCanMoveForward stamp: 'MS 10/25/2020 17:56:18'!
test02MarsRoverCanMoveForward

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'f'.

self assert: MyRover position = (0@1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:28'!
test03CanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
! !

!methodRemoval: MarsRoverTest #test03MarsRoverCanMoveBackwards stamp: 'MS 10/25/2020 17:56:28'!
test03MarsRoverCanMoveBackwards

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'b'.

self assert: MyRover position = (0@-1).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:37'!
test04CanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
! !

!methodRemoval: MarsRoverTest #test04MarsRoverCanRotateRight stamp: 'MS 10/25/2020 17:56:37'!
test04MarsRoverCanRotateRight

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover direction = $E.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:56:44'!
test05CanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
! !

!methodRemoval: MarsRoverTest #test05MarsRoverCanRotateLeft stamp: 'MS 10/25/2020 17:56:44'!
test05MarsRoverCanRotateLeft

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'l'.

self assert: MyRover direction = $O.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:57:13'!
test07RotatingDoesNotAlterPosition

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test07 stamp: 'MS 10/25/2020 17:57:13'!
test07

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'r'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 17:58:14'!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!methodRemoval: MarsRoverTest #test08 stamp: 'MS 10/25/2020 17:58:15'!
test08

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:01:40'!
isMovementCommand: aString

	^ aString = 'f' or: [aString = 'b']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:01:40' prior: 50882775!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(aString = 'r' or: [aString = 'l']) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:04' prior: 50883021!
isMovementCommand: aCommand

	^ aCommand = 'f' or: [aCommand = 'b']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:35'!
isRotationCommand: aString

	^ aString = 'r' or: [aString = 'l']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:35' prior: 50883026!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:02:47' prior: 50883045!
isRotationCommand: aCommand

	^ aCommand = 'r' or: [aCommand = 'l']! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:03:53' prior: 50883050!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:16'!
move: aString

	^ aString = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:17' prior: 50883069!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:32' prior: 50883082!
move: aDirection

	^ aDirection = 'f' 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:05:59'!
rotate: aString

	^ aString = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:06:00' prior: 50883088!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [ self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ self rotate: aString]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:06:26' prior: 50883106!
rotate: aDirection

	^ aDirection = 'r' 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:07:02' prior: 50883112!
processCommands: aString 
	
	(self isMovementCommand: aString) 
		ifTrue: [self move: aString]
		ifFalse: [(self isRotationCommand: aString) 
			ifTrue: [ self rotate: aString]
			ifFalse: [self signalInvalidCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:09:40' prior: 50883128!
processCommands: aString 
	
	self assertIsValidCommand: aString.
	
	(self isMovementCommand: aString) 
		ifTrue: [self move: aString].
	(self isRotationCommand: aString) 
		ifTrue: [ self rotate: aString].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:10:11'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:10:11'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:10:11'!
FAILURE!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:10:14'!
ERROR!
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:10:35'!
assertIsValidCommand: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:13:07' prior: 50883174!
assertIsValidCommand: aString 
	
	((self isMovementCommand: aString) or: [self isRotationCommand: aString]) ifFalse: [self signalInvalidCommand].! !

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:13:09'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:13:16'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:13:16'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:14:09'!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:15:44'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:15:45'!
ERROR!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:20:37' prior: 50883138!
processCommands: aString 
	
	aString do:[:aCommand |self assertIsValidCommand: aCommand.
	
	(self isMovementCommand: aCommand) 
		ifTrue: [self move: aCommand].
	(self isRotationCommand: aCommand) 
		ifTrue: [ self rotate: aCommand]].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:12' prior: 50883040!
isMovementCommand: aCommand

	^ aCommand = $f or: [aCommand = $b]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:27' prior: 50883064!
isRotationCommand: aCommand

	^ aCommand = $r or: [aCommand = $l]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:21:42' prior: 50883100!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= (0@1)]
			ifFalse: [position := (0@-1)]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:22:05' prior: 50883122!
rotate: aDirection

	^ aDirection = $r 
				ifTrue: [direction:= $E]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'assertions' stamp: 'MS 10/25/2020 18:22:22' prior: 50883179!
assertIsValidCommand: aCommand 
	
	((self isMovementCommand: aCommand) or: [self isRotationCommand: aCommand]) ifFalse: [self signalInvalidCommand].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:23:43' prior: 50883226!
processCommands: aString 
	
	aString do:[:aCommand |
		self assertIsValidCommand: aCommand.
	
		(self isMovementCommand: aCommand) 
			ifTrue: [self move: aCommand].
		(self isRotationCommand: aCommand) 
			ifTrue: [ self rotate: aCommand]].! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:23:52'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:23:52'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:24:50' prior: 50883246!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + (0@1)]
			ifFalse: [position := (0@-1)]! !

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:24:57'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:24' prior: 50883214!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ffb'.

self assert: MyRover position = (0@1).
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:29' prior: 50883290!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@1).
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:25:54'!
test10

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:25:59'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:25:59'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:26:16' prior: 50883281!
move: aDirection

	^ aDirection = $f 
			ifTrue: [position:= position + (0@1)]
			ifFalse: [position := position + (0@-1)]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:24'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:26:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:24'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:26:45' prior: 50883298!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:26:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:26:52'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:27:54'!
test11

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:28:24'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:28:24'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:29:46'!
RotateLeft

	^ direction:= $E! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:29:46' prior: 50883252!
rotate: aDirection

	^ aDirection = $r 
				ifTrue: [self RotateLeft]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:10' prior: 50883411!
rotate: aDirection

	^ aDirection = $l 
				ifTrue: [self RotateLeft]
				ifFalse: [direction:= $O]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:24'!
RotateRight

	^ direction:= $O! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:30:24' prior: 50883417!
rotate: aDirection

	^ aDirection = $l 
				ifTrue: [self RotateLeft]
				ifFalse: [self RotateRight]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:33:12' prior: 50883407!
RotateLeft

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:33:58' prior: 50883423!
RotateRight

	direction = $N ifTrue: [direction:= $O].
	direction = $E ifTrue: [direction:= $N].
	direction = $S ifTrue: [direction:= $E].
	direction = $O ifTrue: [direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:34:15'!
RotateLeft1

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:34:55' prior: 50883433!
RotateLeft

	direction = $N ifTrue: [direction:= $O].
	direction = $E ifTrue: [direction:= $N].
	direction = $S ifTrue: [direction:= $E].
	direction = $O ifTrue: [direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:35:05' prior: 50883442!
RotateRight

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].! !

!methodRemoval: MarsRover #RotateLeft1 stamp: 'MS 10/25/2020 18:35:18'!
RotateLeft1

	direction = $N ifTrue: [direction:= $E].
	direction = $E ifTrue: [direction:= $S].
	direction = $S ifTrue: [direction:= $O].
	direction = $O ifTrue: [direction:= $N].!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:35:45'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:35:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:36:03'!
FAILURE!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:36:50'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:38:51' prior: 50883459!
RotateLeft

	direction = $N ifTrue: [^direction:= $O].
	direction = $E ifTrue: [^direction:= $N].
	direction = $S ifTrue: [^direction:= $E].
	direction = $O ifTrue: [^direction:= $S].! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:38:59' prior: 50883468!
RotateRight

	direction = $N ifTrue: [^direction:= $E].
	direction = $E ifTrue: [^direction:= $S].
	direction = $S ifTrue: [^direction:= $O].
	direction = $O ifTrue: [^direction:= $N].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:39:03'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:40:26'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'fab']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@1).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:40:30'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:40:34'!
PASSED!

!methodRemoval: MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:41:34'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'fab']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@1).
self assert: MyRover direction = $N.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:43:24'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:43:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:43:28'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:43:28'!
FAILURE!
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:45:45' prior: 50883319!
move: aDirection

	| forwardDirection |
	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !
!MarsRover methodsFor: 'actions' stamp: 'MS 10/25/2020 18:48:26' prior: 50883674!
move: aDirection

	| forwardDirection |
	
	direction = $N ifTrue:[forwardDirection := (0@1)].
	direction = $E ifTrue:[forwardDirection := (1@0)].
	direction = $S ifTrue:[forwardDirection := (0@-1)].
	direction = $O ifTrue:[forwardDirection := (-1@0)].

	^ aDirection = $f 
			ifTrue: [position:= position + forwardDirection]
			ifFalse: [position := position - forwardDirection]! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:48:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:48:34'!
PASSED!

!methodRemoval: MarsRoverTest #test09 stamp: 'MS 10/25/2020 18:51:15'!
test09

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'ff'.

self assert: MyRover position = (0@2).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:51:55'!
test09canProcessMoreThanOneCommand

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test10 stamp: 'MS 10/25/2020 18:51:55'!
test10

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:52:29'!
test09canProcessMultipleMoveCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
! !

!methodRemoval: MarsRoverTest #test09canProcessMoreThanOneCommand stamp: 'MS 10/25/2020 18:52:29'!
test09canProcessMoreThanOneCommand

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'fb'.

self assert: MyRover position = (0@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:02'!
test11canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!methodRemoval: MarsRoverTest #test11 stamp: 'MS 10/25/2020 18:53:02'!
test11

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:15'!
test10canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
! !

!methodRemoval: MarsRoverTest #test11canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 18:53:15'!
test11canProcessMultipleRotateCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.
MyRover processCommands: 'rr'.

self assert: MyRover direction = $S.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:53:59'!
test11MovesAccordingItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!methodRemoval: MarsRoverTest #test12 stamp: 'MS 10/25/2020 18:53:59'!
test12

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 18:54:31'!
test11MovesTowardsItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
! !

!methodRemoval: MarsRoverTest #test11MovesAccordingItsDirection stamp: 'MS 10/25/2020 18:54:31'!
test11MovesAccordingItsDirection

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $E.
MyRover processCommands: 'f'.

self assert: MyRover position = (1@0).
!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 18:54:39'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 18:54:40'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 18:54:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:00:51'!
test12MarsRoverCantHaveAnInvalidPosition

|MyRover|

self should: [MyRover := MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidInitialPositionErrorDescription.
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:01:18' prior: 50883872!
test12MarsRoverCantHaveAnInvalidPosition

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidInitialPositionErrorDescription.
! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:01:24'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:01:24'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:01:45'!
invalidInitialPositionErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:02:12' prior: 50883898!
invalidInitialPositionErrorDescription
	
	^'Invalid position'! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:02:15'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:03:32' prior: 50882103!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:03:37'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:03:37'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:05:09'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:05:09'!
FAILURE!
!MarsRoverTest methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:05:13' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:02'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:02'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:06:25'!
ERROR!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:06:32'!
ERROR!
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:06:59'!
assertIsValidPosition: aPoint 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:07:31' prior: 50884017!
assertIsValidPosition: aPoint 
	
	aPoint isKindOf: Point.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:09:02' prior: 50884022!
assertIsValidPosition: aPoint 
	
	(aPoint isKindOf: Point) ifFalse:[self error: self invalidInitialPositionErrorDescription].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:09:05'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:11'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:09:11'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:09:11'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:31'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:09:49'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:12:24'!
invalidPositionErrorDescription
	
	^'Invalid position'! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:12:24' prior: 50884027!
assertIsValidPosition: aPoint 
	
	(aPoint isKindOf: Point) ifFalse:[self error: self invalidPositionErrorDescription].! !

!methodRemoval: MarsRover class #invalidInitialPositionErrorDescription stamp: 'MS 10/25/2020 19:12:24'!
invalidInitialPositionErrorDescription
	
	^'Invalid position'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:12:52' prior: 50883882!
test12MarsRoverCantHaveAnInvalidPosition

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidPositionErrorDescription.
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:12:58'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:12:58'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:12:58'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:06'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:06'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:13:38'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:14:10'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:15:10'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:16:57' prior: 50883913!
initializeInPosition: aPoint facing: aDirection 

	"self assertIsValidPosition: aPoint."

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:04'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:17:04'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:17:04'!
FAILURE!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:21'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:17:21'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:18:20'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:27:20'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:29:41' prior: 50882998!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: MarsRover invalidCommandErrorDescription].


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:29:44'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:29:44'!
ERROR!

!methodRemoval: MarsRoverTest #assert:description: stamp: 'MS 10/25/2020 19:31:08'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:31:14'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:31:15'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:15'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:15'!
FAILURE!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:31:28'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:33'!
FAILURE!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:33'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:31:51' prior: 50884162!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:31:59'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:32:26' prior: 50884221!
test08DoesNotProcessInvalidCommands

|MyRover|

MyRover := MarsRover initializeInPosition: 0@0 facing: $N.

self should: [MyRover processCommands: 'a']
	
	raise: Error
		withMessageText: MarsRover invalidCommandErrorDescription.


self assert: MyRover position = (0@0).
self assert: MyRover direction = $N.
! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:32:29'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:32:29'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:33:00'!
test13MarsRoverCantHaveAnInvalidDirection

self should: [MarsRover initializeInPosition: 0 facing: $N.]
	
	raise: Error
		withMessageText: MarsRover invalidDirectionErrorDescription.
! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:05'!
ERROR!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:05'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:33:21'!
invalidDirectionErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'MS 10/25/2020 19:33:37' prior: 50884376!
invalidDirectionErrorDescription
	
	^'Invalid Direction'.! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:33:39'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MS 10/25/2020 19:34:29' prior: 50884360!
test13MarsRoverCantHaveAnInvalidDirection

self should: [MarsRover initializeInPosition: (0@0) facing: 0.]
	
	raise: Error
		withMessageText: MarsRover invalidDirectionErrorDescription.
! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:34:32'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:34:32'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'MS 10/25/2020 19:35:11' prior: 50884298!
initializeInPosition: aPoint facing: aDirection 

	self assertIsValidPosition: aPoint.
	self assertIsValidDirection: aDirection.

	^self new initializeInPosition: aPoint facing: aDirection. ! !

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:35:25'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:35:25'!
FAILURE!
!MarsRoverTest methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:35:30' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!methodRemoval: MarsRoverTest #assert:description: stamp: 'MS 10/25/2020 19:35:54'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:36:12'!
ERROR!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:36:12'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:36:12'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:36:16'!
ERROR!
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:36:30'!
assertIsValidDirection: aCharacter 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'assertions' stamp: 'MS 10/25/2020 19:39:53' prior: 50884475!
assertIsValidDirection: aDirection 
	(aDirection = $N or:[aDirection = $E or: [aDirection = $S or:[aDirection =  $W]]])
		ifFalse:[self error: self invalidDirectionErrorDescription].! !

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:39:55'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverHasPostionAndDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForward stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveBackwards stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test04CanRotateRight stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test05CanRotateLeft stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test06MovingDoesNotAlterTheDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test07RotatingDoesNotAlterPosition stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test08DoesNotProcessInvalidCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test09canProcessMultipleMoveCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test10canProcessMultipleRotateCommands stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test11MovesTowardsItsDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverCantHaveAnInvalidPosition stamp: 'MS 10/25/2020 19:40:14'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverCantHaveAnInvalidDirection stamp: 'MS 10/25/2020 19:40:14'!
PASSED!